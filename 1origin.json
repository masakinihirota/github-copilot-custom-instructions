{
	"github.copilot.chat.codeGeneration.useInstructionFiles": true,
	//////////////////////////////////////////////////////////
	// 実験的機能
	//////////////////////////////////////////////////////////
	// ターミナルにおける入力補完を強化
	"terminal.integrated.suggest.enabled": true,
	// NES Next Edit Suggestionsの機能
	"github.copilot.nextEditSuggestions.enabled": true,
	// NES Next Edit Suggestionsの折りたたみ機能
  "editor.inlineSuggest.edits.showCollapsed": true,
	// パネルチャットのチャット参加者の自動検出を有効にします。
	"chat.detectParticipant.enabled": true,
	// Copilot が適切なファイルを自動的に見つける。
	// Copilot Chatにおける高度なコードベース検索
	"github.copilot.chat.codesearch.enabled":true,
	// Customize GitHub Copilot in VS Code
	// https://code.visualstudio.com/docs/copilot/copilot-customization
	// 設定例
	"github.copilot.chat.codeGeneration.instructions": [
		{
			"text": "常に日本語を使ってください。"
		},
		{
			"text": "TypeScript、Node.js、Next.js (App Router)、React、Shadcn UI、Radix UI、Tailwind CSS、Zustand、Supabase、Zod、Stripeのエキスパートとして振る舞います。"
		},
		{
			"text": "分かりやすい言葉を選び、丁寧な表現を心がけ、初心者にも理解できるように専門用語は避け、必要な場合は簡単な説明を加えます。"
		},
		{
			"text": "常に励ましの言葉を添えます。学習意欲が高まるよう工夫します。"
		},
		{
			"text": "最後に、関連するTipsを教えて下さい。"
		},
		{
			"text": "私の質問の意図が理解できない場合は、何が理解できないのか具体的に教えて下さい。"
		},
		{
			"text": "関数型および宣言型のプログラミングパターンを使用し、クラスの使用は避けます。"
		},
		{
			"text": "コードの重複を避け、反復とモジュール化を優先します。"
		},
		{
			"text": "補助動詞（`isLoading`、`hasError`など）を用いた説明的な変数名を使用します。"
		},
		{
			"text": "ROROパターン（Receive an Object, Return an Object: オブジェクトを受け取り、オブジェクトを返すパターン）を必要に応じて使用します。"
		},
		{
			"text": "提案を行う際は、変更を個別のステップに分解し、各段階で小さなテストを提案して進行状況を確認します。"
		},
		{
			"text": "コードを書く前に、既存のコードを深くレビューし、動作を記述します。"
		},
		{
			"text": "ソリューションのホスト、管理、監視、保守方法を考慮し、運用上の懸念を強調します。"
		},
		{
			"text": "フィードバックに基づいてアプローチを調整し、提案がプロジェクトのニーズに合わせて進化するようにします。"
		},
		{
			"text": "データを危険にさらしたり、新たな脆弱性をもたらさないように、あらゆる段階で確認します。"
		},
		{
			"text": "コード例を示す際は、各行の目的を詳細なコメントで説明し、実行結果も示します。"
		},
		{
			"text": "良いコーディングの習慣やベストプラクティスがあるなら、折りに触れアドバイスをします。"
		},
		{
			"text": "エラーメッセージは、エラーメッセージの意味を解説し、デバッグの手順を段階的に説明します。"
		},
		{
			"text": "複雑な問題は、小さなステップに分割し一つずつ丁寧に解説します。"
		},
		{
			"text": "正確な例を用いて、簡潔で技術的なTypeScriptコードを記述します。"
		},
		{
			"text": "エクスポートされたコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型でファイルを構成します。"
		},
		{
			"text": "コンポーネントは名前付きエクスポートを使用します。コンポーネント名にはケバブケースを使用します（例：`my-component.tsx`）。"
		},
		{
			"text": "関数やコンポーネントには、IDEのインテリセンス向上のためにJSDocコメントを使用し、複雑な処理にはその内容を理解するための詳細なコメントを追加してください。"
		},
		{
			"text": "コンポーネントとスタイリングには、Shadcn UI、Radix UI、Tailwind CSSを使用します。"
		},
		{
			"text": "Tailwind CSSでレスポンシブデザインを実装し、モバイルファーストのアプローチを採用します。"
		},
		{
			"text": "セマンティックなHTML要素を使用し、適切なARIA属性を実装し、キーボードナビゲーションをサポートします。"
		},
		{
			"text": "グローバルな状態管理にはZustandを使用します。"
		},
		{
			"text": "データのフェッチ、キャッシュ、同期にはTanStack Queryを使用します。"
		},
		{
			"text": "`use client`、`useEffect`、`useState`の使用を最小限にし、可能な限りRSCとNext.js SSRの機能を優先します。"
		},
		{
			"text": "URL検索パラメータの状態管理には `nuqs` を使用します。"
		},
		{
			"text": "Drizzle ORM を使用してデータベーススキーマを定義し、型安全なクエリを記述します。"
		},
		{
			"text": "Supabase クライアントを使用してデータベースとやり取りします。"
		},
		{
			"text": "RLS (Row Level Security) ポリシーを適切に設定し、データへのアクセスを制御します。"
		},
		{
			"text": "Supabase Auth、Storage、Edge Functions を必要に応じて使用します。"
		},
		{
			"text": "フォーム入力には制御されたコンポーネントを使用します。"
		},
		{
			"text": "クライアントサイドとサーバーサイドの両方でフォームのバリデーションを実装します。"
		},
		{
			"text": "複雑なフォームには `react-hook-form` の使用を検討します。"
		},
		{
			"text": "スキーマ検証にはZodを使用します。"
		},
		{
			"text": "すべてのサーバーアクションに `next-safe-action` を使用し、適切なバリデーションでタイプセーフなサーバーアクションを実装します。"
		},
		{
			"text": "エラー処理とエッジケースを優先します。"
		},
		{
			"text": "エラー条件にはアーリーリターンを使用し、ガード句を実装して前提条件や無効な状態を早期に処理します。"
		},
		{
			"text": "適切なエラーログとユーザーフレンドリーなエラーメッセージを実装します。"
		},
		{
			"text": "サーバーアクションの戻り値として、予想されるエラーをモデル化します。"
		},
		{
			"text": "予期しないエラーにはエラー境界を使用します。"
		},
		{
			"text": "XSS攻撃を防ぐために、ユーザー入力をサニタイズします。"
		},
		{
			"text": "`dangerouslySetInnerHTML` は控えめに、サニタイズされたコンテンツでのみ使用します。"
		},
		{
			"text": "Web Vitals（LCP、CLS、FID）を最適化します。"
		},
		{
			"text": "クリティカルでないコンポーネントには動的ローディングを使用します。"
		},
		{
			"text": "画像は適切なフォーマットを使用し、サイズデータを含め、遅延ロードを実装します。"
		},
		{
			"text": "Next.jsでルートベースのコード分割を実装します。"
		},
		{
			"text": "グローバルスタイルの使用を最小限に抑え、モジュール化された、スコープされたスタイルを使用します。"
		},
		{
			"text": "支払い処理とサブスクリプション管理にはStripeを実装します。"
		},
		{
			"text": "国際化にはi18nextと関連ライブラリを使用します。"
		},
		{
			"text": "状態の変更はNext.js App Routerに依存します。"
		},
		{
			"text": "サーバーコンポーネントとNext.js SSRの機能を優先し、小さなコンポーネントのWeb APIアクセスにのみ使用し、データ取得や状態管理には使用しないでください。"
		},
		{
			"text": "関数宣言はアロー関数を使ってください。"
		},
		{
			"text": "ループ処理を行う場合は、パフォーマンスに注意し、可能な限り効率的なアルゴリズムを選択してください。"
		},
		{
			"text": "APIキーや秘密情報は、環境変数として安全に管理し、コードに直接埋め込まないでください。"
		},
		{
			"text": "変数名や関数名は、その役割や目的が明確に分かるように、具体的かつ説明的な名前を選んでください。"
		},
		{
			"text": "try-catchブロックを適切に使用し、エラー発生時には意味のあるエラーメッセージを返します。"
		},
		// 以下の設定は、ユーザーから提供された、役割、出力形式、制約条件、テストコードの生成、.github/copilot-instructions.md の活用に関する指示を統合したものです。
		{
			"text": "あなたは、経験豊富なTypeScriptプログラマーです。与えられた仕様に基づいて、効率的で読みやすいTypeScriptコードを生成してください。"
		},
		{
			"text": "生成するコードには、適切なコメントとドキュメンテーションを含めてください。関数やクラスには、その目的と使い方を説明するdocstringを記述してください。"
		},
		{
			"text": "生成するコードは、指定されたライブラリのみを使用してください。外部ライブラリを使用する場合は、事前に承認を得てください。"
		},
		{
			"text": "コードの実行速度は、例えば、90パーセンタイルのリクエストが200ms以内に完了するようにしてください。"
		},
		{
			"text": "生成するコードには、単体テストコードを自動的に生成してください。テストコードは、vitestとReact Testing Libraryを使用し、コンポーネントのユニットテストを記述してください。"
		},
		{
			"text": "このリポジトリで生成されるコードは、常に〇〇のコーディング標準に従ってください。"
		},
		{
			"text": "セキュリティ上の脆弱性を避けるため、〇〇のライブラリの使用は避けてください。"
		},
		{
			// コード生成の指示書
			"file": ".copilot-codeGeneration-instructions.md"
		}
	],
	"github.copilot.chat.testGeneration.instructions": [
		{
			"text": "テストにはvitestとReact Testing Libraryを使用してコンポーネントのユニットテストを記述します。"
		},
		{
			"text": "重要なユーザーフローには統合テストを実装します。"
		},
		{
			// テストの指示書
			"file": ".copilot-test-instructions.md"
		}
	],
	"github.copilot.chat.reviewSelection.instructions": [
		{
			"text": "潜在的なセキュリティリスクがある場合は、追加のレビューを行います。"
		},
		{
			"text": "コードの可読性を重視してレビューしてください。"
		},
		{
			"text": "エラーハンドリングが適切か確認してください。"
		},
		{
			"text": "テストケースがカバーされているか確認してください。"
		},
		{
			// レビューの指示書
			"file": ".copilot-review-instructions.md"
		}
	],
	"github.copilot.chat.commitMessageGeneration.instructions": [
		{
			"text": "コミットメッセージは短く、要点を押さえたものにしてください。"
		},
		{
			"text": "変更内容の概要を明確に書いてください。"
		},
		{
			// コミットメッセージの指示書
			"file": ".copilot-commit-message-instructions.md"
		}
	],
	"github.copilot.chat.generateTests.codeLens": true,

	//////////////////////////////////////////////////////////
	// Copilot Edits
	// https://code.visualstudio.com/docs/copilot/copilot-edits
	//
	"github.copilot.chat.edits.enabled": true,
	// GitHub Copilot Edits ワーキング セットの Git 履歴から関連ファイルを提案するかどうかを制御します。
	"github.copilot.chat.edits.suggestRelatedFilesFromGitHistory": true,
	// GitHub Copilot Edits ワーキング セットのテスト ファイルからソース ファイルを提案するかどうかを制御します。
	"github.copilot.chat.edits.suggestRelatedFilesForTests": true,
	//////////////////////////////////////////////////////////
	// チャットでプレビュー '/fixTestFailure' インテントを有効にし、特定の '/fix' 呼び出しを自動的に委任します。デフォルトで有効
	"github.copilot.chat.fixTestFailure.enabled": true,
	// コマンド センターにチャット アクションのメニューを表示する
	"chat.commandCenter.enabled": true,
	// VSCodeの新機能 タブの表示名をカスタムする。
	// Next.js Routing Files 専用
	"workbench.editor.customLabels.enabled": true,
	"workbench.editor.customLabels.patterns": {
		"**/app/layout.{js,jsx,tsx}": "${dirname} トップレイアウト",
		"**/app/page.{js,jsx,tsx}": "${dirname} トップページ",
		"**/layout.{js,jsx,tsx}": "${dirname}のレイアウト",
		"**/page.{js,jsx,tsx}": "${dirname}のページ",
		"**/loading.{js,jsx,tsx}": "${dirname}の${filename}.${extname}",
		"**/not-found.{js,jsx,tsx}": "${dirname}の${filename}.${extname}",
		"**/error.{js,jsx,tsx}": "${dirname}の${filename}.${extname}",
		"**/global-error.{js,jsx,tsx}": "${dirname}の${filename}.${extname}",
		"**/template.{js,jsx,tsx}": "${dirname}の${filename}.${extname}",
		"**/default.{js,jsx,tsx}": "${dirname}の${filename}.${extname}",
		"**/route.{js,ts}": "${dirname} ${filename}.${extname} API",
		"**/callback/route.{js,ts}": "${dirname(1)} ${dirname} ${filename}.${extname}"
	},
	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	//
	"editor.accessibilitySupport": "off",
	// "accessibility.signals.sounds.volume": 0,
	// "accessibility.signals.progress": { "sound": "off" },
	// "accessibility.signals.positionHasError": { "sound": "off" },
	// "accessibility.signals.positionHasWarning": { "announcement": "off" },
	// "accessibility.signals.chatResponseReceived": { "sound": "off" },
	// "accessibility.signals.voiceRecordingStopped": { "sound": "off" },
	// "accessibility.signals.chatRequestSent": { "sound": "off" },
	// "accessibility.signals.clear": {"sound": "off" },
	// "accessibility.signals.lineHasFoldedArea": {"sound": "off" },
	// "accessibility.signals.lineHasInlineSuggestion": {"sound": "off" },
	// "accessibility.signals.noInlayHints": {"sound": "off" },
	// "accessibility.signals.notebookCellCompleted": {"sound": "off" },
	// "accessibility.signals.onDebugBreak": {"sound": "off" },
	// "accessibility.signals.notebookCellFailed": {"sound": "off" },
	// "accessibility.signals.taskCompleted": {"sound": "off" },
	// "accessibility.signals.terminalQuickFix": {"sound": "off" },
	// "accessibility.signals.terminalCommandFailed": {"sound": "off" },
	// "accessibility.signals.terminalBell": {"sound": "off" },
	// "accessibility.signals.taskFailed": {"sound": "off" },
	// "accessibility.signals.lineHasWarning": {"sound": "off" },
	// "accessibility.signals.lineHasError": {"sound": "off" },
	// "accessibility.signals.lineHasBreakpoint": {"sound": "off" },
	// "accessibility.signals.diffLineModified": {"sound": "off" },
	// "accessibility.signals.diffLineInserted": {"sound": "off" },
	// "accessibility.signals.diffLineDeleted": {"sound": "off" },
	//////////////////////////////////////////////////////////
	"inlineChat.mode": "live",
	// 拡張機能
	// Markuplintを有効化する
	// "markuplint.enable": true,
	//////////////////////////////////////////////////////////
	// プログラミング
	// 引数の名前が表示されます。
	// "javascript.inlayHints.parameterNames.enabled": "all",
	// "typescript.inlayHints.parameterNames.enabled": "all",
	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	// 確定
	//////////////////////////////////////////////////////////
	// ctrl+マウスホイールでの文字サイズ変更
	"editor.mouseWheelZoom": true,
	// "workbench.startupEditor": "newUntitledFile",
	// "workbench.startupEditor": "none",
	"workbench.startupEditor": "none",
	// 最後を閉じたときVSCodeも閉じる
	"window.closeWhenEmpty": false,
	// 文字の上下左右の幅
	"editor.letterSpacing": -0.3,
	// 無駄なホワイトスペースを削除
	"files.trimTrailingWhitespace": true,
	// アイコン設定
	"workbench.iconTheme": "vscode-icons",
	// タブの名前の長さに応じてタブの幅が変更される
	"workbench.editor.tabSizing": "shrink",
	// 保存時に行末のホワイトスペースを削除
	// "files.": true,
	// タイトルバーにファイルのフルパスを表示する
	// "window.title": "${dirty}${activeEditorMedium}",
	"window.title": "${dirty}${activeEditorMedium} - ${rootName}",
	// 制御文字を表示する
	"editor.renderControlCharacters": true,
	// コメント色変更
	"editor.tokenColorCustomizations": {
		"comments": "#efefef"
	},
	// タグ名を変更する時、同時に閉じタグも変更する
	"editor.linkedEditing": true,
	// ファイルの末尾を改行で終わらせる
	"files.insertFinalNewline": true,
	// 対応する括弧に色付けをする
	"editor.bracketPairColorization.enabled": true,
	// テキストコピー時に書式設定を含めない
	"editor.copyWithSyntaxHighlighting": false,
	// 行番号の表示
	"editor.lineNumbers": "on",
	// 行番号が強調表示される
	"editor.renderLineHighlight": "all",
	"editor.renderLineHighlightOnlyWhenFocus": true,
	// カーソル行とエディタ上下端との間にキープする行数を指定
	// 上下のコードを見るのに便利(重要)
	// 入力時に自動的に目線の高さが維持されるため（ターミナルも消しているから）
	// この数値が低いとモーダルウィンドウで見づらくなる
	"editor.cursorSurroundingLines": 10,
	// quick open(ctrl+pキー)でも同じ動作にする。
	// true プレビューモードで開かれる
	// false 通常のエディタとして開かれる
	"workbench.editor.enablePreviewFromQuickOpen": false,
	// ファイルを開いた時に、ファイルの最後の位置を記憶する
	// タブは常に最後尾で開く
	"workbench.editor.openPositioning": "last",
	//////////////////////////////////////////////////////////
	// エクスプローラー設定:ファイル構造のインデントを20pxにする
	"workbench.tree.indent": 24,
	// エクスプローラー設定:ファイル構造をコンパクトに表示する (例:フォルダ／フォルダと表示する)
	"explorer.compactFolders": false,
	//////////////////////////////////////////////////////////
	// 保存時にファイルの変更部分だけを
	// 自動的に整形するかどうかを設定する。
	// "file" 保存時にファイル全体が整形されます。
	// "modifications"変更部分が整形されます。
	// "modificationsIfAvailable" 保存時に変更部分だけが整形されます。(ソース管理が必要)
	"editor.formatOnSaveMode": "modificationsIfAvailable",
	// 自動保存するタイミング
	// "afterDelay" 設定値を過ぎたら保存
	// "onFocusChange" フォーカスが外れた時
	// "onWindowChange" エディタのフォーカスが外れた時
	"files.autoSave": "onFocusChange",
	//////////////////////////////////////////////////////////
	// 文字の大きさ
	//////////////////////////////////////////////////////////
	// エディタでのフォントサイズ
	"editor.fontSize": 20,
	// ターミナル文字サイズ
	"terminal.integrated.fontSize": 18,
	// チャット欄のコードフォントの大きさ
	"chat.editor.fontSize": 18,
	// デバッグコンソール文字サイズ
	"debug.console.fontSize": 18,
	// 行間の幅
	"editor.lineHeight": 26,
	// import文の自動挿入

	// 保存時に自動でimportを挿入する
	"editor.codeActionsOnSave": [
		// 👇️これらは設定すると待機時間がかなり掛かる
		// 保存時にlinterを実行
		// "quickfix.biome",
		// 保存時にimportの自動挿入
		// "source.addMissingImports",
		// 保存時にimportのソートを実行
		// "source.organizeImports.biome",
		// "source.fixAll.eslint"
	],
	// 区切り文字の設定変更
	// 変数名をダブルクリックした時、ハイフンが区切り文字として判定されます。
	// それらの判定を変更します。
	"editor.wordSeparators": "./\\()\"'-:,.;<>~!@#$%^&*|+=[]{}`~?゠・，、；：！？．。‘’“”（）｟｠［］〚〛〔〕｛｝〈〉《》「」『』【】〖〗〝〟がを",
	// "editor.wordSeparators": "./\\()\"'-:,.;<>~!@#$%^&*|+=[]{}`~?゠・，；：！？．。",
	// "editor.wordSeparators": "./\\()\"'-:,.;<>~!@#$%^&*|+=[]{}`~?゠・，、；：！？．。‘’“”（）｟｠［］〚〛〔〕｛｝〈〉《》「」『』【】〖〗〝〟がてでとにのはへもやを",
	// "editor.wordSeparators": "`~!@#%^&*()=+[{]}\\|;:'\",.<>/?       ",
	// 完璧版
	// "editor.wordSeparators": "./\\()\"'-:,.;<>~!@#$%^&*|+=[]{}`~?゠・，、；：！？．。‘’“”（）｟｠［］〚〛〔〕｛｝〈〉《》「」『』【】〖〗〝〟がてでとにのはへもやを",
	// VSCodeのカラーテーマ
	"workbench.colorTheme": "Default Dark+",
	// iconTheme
	// VS Code の新しいバージョンがリリースされたときにメッセージを表示しない
	"vsicons.dontShowNewVersionMessage": true,
	// おすすめメッセージを表示しない
	"extensions.ignoreRecommendations": true,
	//////////////////////////////////////////////////////////
	// カーソル
	//////////////////////////////////////////////////////////
	// カーソルを点滅させる
	"editor.cursorBlinking": "phase",
	// カーソルをスムースに点滅させる
	"editor.cursorSmoothCaretAnimation": "on",
	// "editor.cursorSmoothCaretAnimation": "explicit",
	// カーソルの形状
	"editor.cursorStyle": "block",
	// アクティブなタブの背景の色を変える
	"workbench.colorCustomizations": {
		"editorCursor.foreground": "#fcfcfcd7",
		"terminalCursor.foreground": "#fcfcfcd7",
		"tab.activeBackground": "#3846aa",
		"editorWhitespace.foreground": "#d1d41b" // whatever hex color you want
	},
	//////////////////////////////////////////////////////////
	// HTMLタグを自動的に閉じる
	//////////////////////////////////////////////////////////
	"javascript.autoClosingTags": true,
	"typescript.autoClosingTags": true,
	// デフォルトの改行コード
	"files.eol": "\r\n",
	// 削除時にゴミ箱を使うかどうかを聞く
	"explorer.confirmDelete": false,
	// ドラッグアンドドロップでファイル移動時に確認
	"explorer.confirmDragAndDrop": false,
	//////////////////////////////////////////////////////////
	// ファイルタブ
	//////////////////////////////////////////////////////////
	// ファイルタブの多段表示
	"workbench.editor.wrapTabs": true,
	// エラーファイルにはファイルタブに色をつける
	"workbench.editor.decorations.colors": true,
	// ファイルタブを装飾 状態を知らせる
	"workbench.editor.decorations.badges": true,
	"files.autoGuessEncoding": true, // ファイルの自動エンコードを実施
	// パンくずリスト（ファイルタブの下に階層リンクが表示される）
	"breadcrumbs.enabled": true,
	//////////////////////////////////////////////////////////
	// ターミナル
	//////////////////////////////////////////////////////////
	// ターミナルのカーソルを点滅させる
	"terminal.integrated.cursorBlinking": true,
	// ターミナルの文字列選択で自動コピー
	"terminal.integrated.copyOnSelection": true,
	// ターミナルの右クリックで貼り付ける
	"terminal.integrated.rightClickBehavior": "paste",
	// ミニマップの大きさ 1-3
	"editor.minimap.scale": 2,
	// ミニマップの文字を表示 falseでブロック表示
	"editor.minimap.renderCharacters": false,
	// ミニマップ表示領域をハイライト
	"editor.minimap.showSlider": "always",
	//////////////////////////////////////////////////////////
	// ファイル検索
	//////////////////////////////////////////////////////////
	// 検索(Quick Open含む)から除外するファイルを指定。
	// エクスプローラーには表示される
	// http://qiita.com/shimoju/items/f64a0a7f0baa9cfafd4b
	"search.exclude": {
		// "**/node_modules": true,
		"**/bower_components": true,
		"**/bundle": true,
		"**/composer": true,
		"**/tmp": true,
		"**/.tmp": true,
		"**/.next": true
	},
	// エクスプローラーから除外するファイルとフォルダ
	// files.excludeは
	// エクスプローラーからも検索からも除外され、
	// 完全にないものとして扱われる
	"files.exclude": {
		"**/.git": true,
		"**/CVS": true,
		"**/*.exe": true,
		"**/*.o": true,
		"**/*.out": true,
		"**/*.obj": true,
		"**/*.ilk": true,
		"**/*.pdb": true,
		"**/*.tlog": true,
		"**/*.idb": true,
		"**/*.dll": true,
		"**/*.lock": true
		// "**/bin": true
		// "**.vs": true
		//
		//
	},
	//////////////////////////////////////////////////////////
	// 拡張機能
	//////////////////////////////////////////////////////////
	// 拡張機能 code-runner
	//////////////////////////////////////////////////////////
	// code-runnerの表示をターミナルに変更
	"code-runner.runInTerminal": true,
	// code-runnerのコマンドをエディタ上での右クリックで表示しない
	"code-runner.showRunCommandInEditorContextMenu": false,
	// code-runnerのコマンドをエクスプローラー上での右クリックで表示しない
	"code-runner.showRunCommandInExplorerContextMenu": false,
	"code-runner.executorMap": {
		"javascript": "clear; node",
		"typescript": "clear; ts-node"
		// "cpp": "cd $dir && g++ -Wall -std=c++11 \"$fileName\" -o \"$fileNameWithoutExt.out\" && $dir\"$fileNameWithoutExt.out\"",
		// "cpp": "cd $dir && g++ -std=c++11 -Wall -pedantic \"$fileName\" -o \"$fileNameWithoutExt.out\" && $dir\"$fileNameWithoutExt.out\"",
		// https://qiita.com/janus_wel/items/07140fcd1127b568087d
		// -std=c++11	対象ソースが C++11 準拠としてコンパイルする
		// -Wall	基本的な警告オプションを on にする
		// -pedantic ISO C/C++ に存在しない文法を警告する
	},
	// code-runner実行時にターミナルを一旦クリア
	"code-runner.clearPreviousOutput": true,
	//////////////////////////////////////////////////////////
	// 拡張機能 power mode
	//////////////////////////////////////////////////////////
	// 文字入力をすると弾けるアニメーション機能
	// 有効無効
	"powermode.enabled": true,
	// 基本的な描写
	"powermode.presets": "particles", //◎
	// "powermode.presets": "fireworks",//▲
	// "powermode.presets": "clippy",X
	// "powermode.presets": "exploding-rift",X
	// "powermode.presets": "flames",X
	// "powermode.presets": "magic",X
	// "powermode.presets": "simple-rift",X
	// コンボカウンターの表示場所を制御する
	"powermode.combo.location": "default",
	// カウント数を表示
	"powermode.combo.counterEnabled": "hide",
	// カウントバーを表示
	"powermode.combo.timerEnabled": "hide",
	// 画面の揺れ
	"powermode.shake.enabled": false,
	//////////////////////////////////////////////////////////
	// タグ 拡張機能
	// Highlight Matching Tag
	//////////////////////////////////////////////////////////
	// タグのペアを強調表示
	"highlight-matching-tag.enabled": true,
	"highlight-matching-tag.showPath": true,
	"highlight-matching-tag.highlightFromContent": true,
	"highlight-matching-tag.showRuler": true,
	"highlight-matching-tag.styles": {
		"opening": {
			"left": {
				"underline": "yellow"
			},
			"right": {
				"surround": "#155FFA"
			},
			"name": {
				"highlight": "rgba(180, 20, 80, 0.3)"
			}
		},
		"closing": {
			"full": {
				"custom": {
					"dark": {
						"borderWidth": "0 0 1px 0",
						"borderColor": "white",
						"borderStyle": "solid",
						"borderRadius": "4px",
						"right": "10px"
					},
					"light": {
						"borderWidth": "0 0 1px 0",
						"borderColor": "brown",
						"borderStyle": "solid",
						"borderRadius": "4px",
						"right": "10px"
					}
				}
			}
		}
	},
	//////////////////////////////////////////////////////////
	// ファイルタイプ別の設定
	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	// フォーマット
	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	// Biome js, jsx, ts, tsxファイルをフォーマット json
	//////////////////////////////////////////////////////////
	"[javascript]": {
		"editor.defaultFormatter": "biomejs.biome",
		"editor.formatOnSave": true,
		"editor.codeActionsOnSave": {
			"source.organizeImports.biome": "always"
		}
	},
	"[typescript]": {
		"editor.defaultFormatter": "biomejs.biome",
		"editor.formatOnSave": true,
		"editor.codeActionsOnSave": {
			"source.organizeImports.biome": "always"
		}
	},
	"[javascriptreact]": {
		"editor.defaultFormatter": "biomejs.biome",
		"editor.formatOnSave": true,
		"editor.codeActionsOnSave": {
			"source.organizeImports.biome": "always"
		}
	},
	"[typescriptreact]": {
		"editor.defaultFormatter": "biomejs.biome",
		"editor.formatOnSave": true,
		"editor.codeActionsOnSave": {
			"source.organizeImports.biome": "always"
		}
	},
	"[json]": {
		"editor.defaultFormatter": "biomejs.biome"
	},
	"[jsonc]": {
		"editor.defaultFormatter": "biomejs.biome"
	},
	"typescript.preferences.importModuleSpecifier": "non-relative",
	"editor.tabSize": 2,
	//////////////////////////////////////////////////////////
	// ESLint
	//////////////////////////////////////////////////////////
	// ESLint 拡張機能 で Flat Config を有効化する
	// "eslint.experimental.useFlatConfig": true,
	//////////////////////////////////////////////////////////
	// CSS を検証しない
	// "css.validate": false,
	// "scss.validate": false,
	//////////////////////////////////////////////////////////
	// Prettier
	//////////////////////////////////////////////////////////
	// // デフォルトのフォーマッターとして選択
	// "editor.defaultFormatter": "esbenp.prettier-vscode",
	// 設定ファイルがプロジェクトのルートディレクトリに存在する場合にのみ動作します。
	// "prettier.requireConfig": true,
	// 設定ファイルの名前と場所(rootに置きます。)
	// "prettier.configPath": ".prettier.json",
	// "[javascript]": {
	//   "editor.defaultFormatter": "esbenp.prettier-vscode"
	// },
	// 右端で折り返すかどうか
	// "editor.wordWrap": "on",
	"editor.wordWrap": "bounded",
	"editor.wordWrapColumn": 80,
	// ルーラー（文字数を見る目印の線）を引く
	"editor.rulers": [40, 80, 120, 160, 200],
	// markdownはPrettierで自動保存フォーマットから除外する。
	"[markdown]": {
		// markdown専用の設定
		"editor.formatOnSave": false,
		"editor.wrappingStrategy": "simple",
		"editor.wordBreak": "normal",
		// 区切り文字
		// markdown編集用
		// "editor.wordSeparators": "./\\':,.;<>~!@#$%^&*|+=~?！？．。",
		"editor.wordSeparators": "./\\()\"'-:,.;<>~!@#$%^&*|+=[]{}`~?゠・，、；：！？．。‘’“”（）｟｠［］〚〛〔〕｛｝〈〉《》「」『』【】〖〗〝〟がを",
		// "editor.wordSeparators": "./\\()\"'-:,.;<>~!@#$%^&*|+=[]{}`~?゠・，、；：！？．。‘’“”（）｟｠［］〚〛〔〕｛｝〈〉《》「」『』【】〖〗〝〟がを",
		// 通常用
		// "editor.wordSeparators": "./\\()\"'-:,.;<>~!@#$%^&*|+=[]{}`~?゠・，、；：！？．。‘’“”（）｟｠［］〚〛〔〕｛｝〈〉《》「」『』【】〖〗〝〟がを",
		// 完璧版
		// "editor.wordSeparators": "./\\()\"'-:,.;<>~!@#$%^&*|+=[]{}`~?゠・，、；：！？．。‘’“”（）｟｠［］〚〛〔〕｛｝〈〉《》「」『』【】〖〗〝〟がてでとにのはへもやを",
		// 空白文字の表示
		"editor.unicodeHighlight.invisibleCharacters": true,
		// 曖昧な Unicode 文字にハイライトを加える (true)
		"editor.unicodeHighlight.ambiguousCharacters": true,
		// ハイライトを加えない Unicode 文字を指定する
		"editor.unicodeHighlight.allowedCharacters": {
			"゠": true,
			"，": true,
			"；": true,
			"：": true,
			"！": true,
			"？": true,
			"．": true,
			"‘": true,
			"’": true,
			"（": true,
			"）": true,
			"［": true,
			"］": true,
			"｛": true,
			"｝": true,
			"〔": true,
			"〕": true,
			"＜": true,
			"＞": true,
			"ノ": true
		},
		// 対応する括弧に色付けをする
		"editor.bracketPairColorization.enabled": true,
		// 対応する括弧の構成
		"editor.language.colorizedBracketPairs": [
			["‘", "’"],
			["“", "”"],
			["(", ")"],
			["（", "）"],
			["｟", "｠"],
			["[", "]"],
			["［", "］"],
			["〚", "〛"],
			["〔", "〕"],
			["{", "}"],
			["｛", "｝"],
			["〈", "〉"],
			["《", "》"],
			["「", "」"],
			["『", "』"],
			["【", "】"],
			["〖", "〗"],
			["〝", "〟"]
		]
	},
	// 貼り付け時にフォーマット
	"editor.formatOnPaste": false,
	// 入力直後にフォーマット
	"editor.formatOnType": false,
	// フォーマット時に保存
	"editor.formatOnSave": true,
	//////////////////////////////////////////////////////////
	// 補完
	//////////////////////////////////////////////////////////
	//PathIntellisense
	"typescript.suggest.paths": true,
	"editor.suggestSelection": "first",
	// "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
	//
	// サジェスト機能
	// 下記の3つは衝突する、どちらかの機能が効かなくなる
	// カーソルに近い順に候補が並び替えされます。
	// "editor.suggest.localityBonus": true,
	// トリガー文字の入力時に候補が自動的に表示されるようにするかどうかを制御します。
	"editor.suggestOnTriggerCharacters": true,
	// Suggestionsの表示ディレイ
	"editor.quickSuggestionsDelay": 50,
	// ドキュメント内の単語に基づいて入力候補を計算するかどうか
	"editor.wordBasedSuggestions": "matchingDocuments",
	//
	// "top"//他の候補の上にスニペットを優先して表示
	// "none"//スニペットの候補を表示しない
	// "bottom"//スニペットの候補は一番下
	// "inline"//ファイル内の関数名とかが優先される。(既定値)
	// editor.suggest.localityBonusと衝突、無効にする。
	"editor.snippetSuggestions": "inline",
	//
	// サジェスト一覧の初期表示項目設定
	"vsintellicode.modify.editor.suggestSelection": "choseToUpdateConfiguration",
	// スニペットのタブストップ中にも入力候補を補完します。
	"editor.suggest.snippetsPreventQuickSuggestions": false,
	//////////////////////////////////////////////////////////
	// Gitmoji Commit
	//////////////////////////////////////////////////////////
	// 絵文字か、コードか選択する
	// emoji 絵文字が挿入される
	// code コードが挿入される
	"gitmoji.outputType": "emoji",
	// ↓設定したものだけを表示する
	// trueの場合 ユーザー設定のみ表示
	// falseの場合 デフォルト＋ユーザー設定の両方を表示
	"gitmoji.onlyUseCustomEmoji": true,
	// ユーザー設定 絵文字を設定する
	"gitmoji.addCustomEmoji": [
		// https://gitmoji.dev/
		// ↑からコードをコピペ出来ます。
		// テンプレート
		// { "emoji": "", "code": "", "description": "" },
		// { "emoji": "", "code": "", "description": "" },
		// { "emoji": "", "code": "", "description": "" },
		// 設定の順番通りに表示されるので、好きな順番に並べ替えてください。
		// アイコンが重複しても、コードが重複しても、表示されます。同じアイコンで別の説明を利用することも可能です。
		// 使用頻度の高いもの
		// ドキュメント関連 機能に影響のないもの
		{
			"emoji": "📝 ドキュメントの微修正",
			"code": ":memo:",
			"description": "ドキュメントの微修正 追加・更新"
		},
		{
			"emoji": "📚 ドキュメントの変更",
			"code": ":books:",
			"description": "ドキュメント コメント 大きなスケールでの変更 使い方が変わる説明"
		},
		// コード関連 一般作業
		{
			"emoji": "🎨",
			"code": ":art:",
			"description": "コードの構造 形式の改善、整理"
		},
		{
			"emoji": "⚙",
			"code": ":gear:",
			"description": "設定の変更 config変更"
		},
		{
			"emoji": "💄",
			"code": ":lipstick:",
			"description": "UIやスタイルファイルの更新"
		},
		{
			"emoji": "🐛",
			"code": ":bug:",
			"description": "バグ修正"
		},
		{
			"emoji": "♻️",
			"code": ":recycle:",
			"description": "コードのリファクタリング、コードの整理整頓"
		},
		{
			"emoji": "🧑‍💻",
			"code": ":technologist:",
			"description": "何もなし、区切りをつけたい時、空タグ"
		},
		{
			"emoji": "🔖",
			"code": ":bookmark:",
			"description": "Tagをつける時に使います。"
		},
		{
			"emoji": "🗃️",
			"code": ":card_file_box:",
			"description": "DB関連の変更をします。"
		},
		{
			"emoji": "🌱",
			"code": ":seedling:",
			"description": "DB関連シード ファイルを追加または更新します。"
		},
		{
			"emoji": "✅",
			"code": ":white_check_mark:",
			"description": "テストが成功した"
		},
		{
			"emoji": "🧪",
			"code": ":test_tube:",
			"description": "失敗するテストの追加"
		},
		{
			"emoji": "💚",
			"code": ":green_heart:",
			"description": "テストやCIの修正・改善"
		},
		{
			"emoji": "🔥",
			"code": ":fire:",
			"description": "コードやファイル、機能の削除"
		},
		{
			"emoji": "🚧",
			"code": ":construction:",
			"description": "作業中断 WIP work in progress 作業中です。"
		},
		{
			"emoji": "⚡️",
			"code": ":zap:",
			"description": "パフォーマンスの向上をしました。"
		},
		{
			"emoji": "🚑️",
			"code": ":ambulance:",
			"description": "緊急性の高いバグを修正した時に使います、これを見たら早めにレビューをしてください。"
		},
		{
			"emoji": "⚰️",
			"code": " :coffin:",
			"description": "デッドコードを削除"
		},
		{
			"emoji": "💩",
			"code": ":poop:",
			"description": "非推奨、削除予定等"
		},
		{
			"emoji": "✨",
			"code": ":sparkles:",
			"description": "新しい機能の追加 新しくコードやファイルの追加"
		},
		{
			"emoji": "🎉 プロジェクトを開始します！",
			"code": ":tada:",
			"description": "初めてのコミット"
		}
		// {"emoji":"","code":"","description":"" },
		// {"emoji":"","code":"","description":"" },
		// {"emoji":"","code":"","description":"" },
		// {"emoji":"","code":"","description":"" },
		// {"emoji":"","code":"","description":"" },
		// {"emoji":"👍","code":":+1:","description":"機能改善" },
		// {"emoji":"💢","code":":anger:","description":"コンフリクトの解消をしました。" },
		// {
		//"emoji":"👕",
		//"code":":shirt:",
		//"description":"Lintエラーの修正やコードスタイルの修正"
		// },
		// {"emoji":"🚀","code":":rocket:","description":"パフォーマンス改善" },
		// {
		//"emoji":"🆙",
		//"code":":up:",
		//"description":"依存パッケージなどのアップデート"
		// },
		// {"emoji":"👮","code":":cop:","description":"セキュリティ関連の改善" },
		// 定型文 アイコン＋説明文 （殆ど使わない）
	],
	//////////////////////////////////////////////////////////
	// Tailwind CSS IntelliSense
	//////////////////////////////////////////////////////////
	// 推奨されるVSコードの設定 ファイル.アソシエーションズ
	// files.associations設定を使用すると、VS Codeが常にTailwind CSSモードで.cssファイルを開くように指示します：
	"files.associations": {
		"*.css": "tailwindcss"
	},
	// デフォルトでは、VS Codeは、JSX属性値などの「文字列」コンテンツを編集する際に、補完をトリガーしないようになっています。
	// 入力中に補完候補をだすかどうか
	// 以下の設定でコメントの中でもどこでも
	// 補完候補を出せるようになる
	// 「"strings": true」はTailwindCSSの推奨設定です。
	"editor.quickSuggestions": {
		"other": true,
		"comments": true,
		"strings": true
	},
	// 普通のテキストファイルでも
	"tailwindCSS.includeLanguages": {
		"plaintext": "html"
	},
	//////////////////////////////////////////////////////////
	// Github Copilot
	//////////////////////////////////////////////////////////
	// Github Copilot の提案の表示を有効にするかどうか決めます。
	"editor.inlineSuggest.enabled": true,
	// Github Copilot の Brushes Lenses 提案の表示を有効にするかどうか決めます。
	"github.copilot-labs.showBrushesLenses": true,
	// Github Copilot の Test 提案の表示を有効にするかどうか決めます。
	"github.copilot-labs.showTestGenerationLenses": true,
	// 言語単位で Github Copilot を有効にするかどうかを決めます。
	"github.copilot.enable": {
		"*": true,
		"plaintext": true,
		"markdown": true,
		"scminput": false,
		"typescriptreact": true,
		"javascriptreact": true,
		"typescript": true,
		"javascript": true,
		"python": true,
		"yaml": true
	},
	// 不明
	"github.copilot.advanced": {},
	//////////////////////////////////////////////////////////
	// Todo Tree VSCode拡張機能
	//////////////////////////////////////////////////////////
	// チェックするワード
	"todo-tree.general.tags": [
		"TODO",
		"FIXME",
		"BUG",
		"NOTE",
		"CHECK",
		"項目未完了",
		"項目完了"
	],
	"todo-tree.highlights.defaultHighlight": {
		"gutterIcon": true,
		"icon": "alert",
		"type": "text",
		"foreground": "#ff0101",
		"background": "#717171",
		"opacity": 50,
		"iconColour": "#1e00ff"
	},
	"todo-tree.highlights.customHighlight": {
		"TODO": {
			"icon": "check-circle-fill",
			"foreground": "#ffa500",
			"iconColour": "#ffa500"
		},
		"FIXME": {
			"icon": "flame",
			"foreground": "#ffff00",
			"iconColour": "#ffff00"
		},
		"NOTE": {
			"icon": "paintbrush",
			"foreground": "#00bfff",
			"iconColour": "#00bfff"
		},
		"CHECK": {
			"icon": "plus-circle",
			"foreground": "#00FF00",
			"iconColour": "#00FF00"
		}
	},
	// Todo Tree VSCode拡張機能
	// アクティビティバーにTodoリストの数を表示します。
	"todo-tree.general.showActivityBarBadge": false,
	// todo-treeで無視するフォルダーを指定します。
	// "todo-tree.filtering.excludeGlobs": ["**/node_modules/*"],
	//////////////////////////////////////////////////////////
	// emmetをjavascriptでも使用可能
	//////////////////////////////////////////////////////////
	"emmet.triggerExpansionOnTab": true,
	"emmet.showAbbreviationSuggestions": true,
	"emmet.includeLanguages": {
		"javascript": "javascriptreact",
		"typescript": "typescriptreact"
	},
	//////////////////////////////////////////////////////////
	// indent-rainbow
	//////////////////////////////////////////////////////////
	// ライト モード (v8.3.0 以降の新機能)
	// 空白の背景色の代わりに線 (カスタマイズ可能な幅) を使用する (新しい) 代替モードがあります。私が気に入っている構成例は次のとおりです。
	// Using the light mode
	"indentRainbow.indicatorStyle": "light",
	// we use a simple 1 pixel wide line
	"indentRainbow.lightIndicatorStyleLineWidth": 1,
	// the same colors as above but more visible
	"indentRainbow.colors": [
		"rgba(255,255,64,0.3)",
		"rgba(127,255,127,0.3)",
		"rgba(255,127,255,0.3)",
		"rgba(79,236,236,0.3)"
	],
	// 対応言語は両方定義してもあまり意味がありません。
	// どの言語で indent-rainbow を有効にする必要があるか (空の場合はすべてを意味します)。
	// for example ["nim", "nims", "python"]
	// "indentRainbow.includedLanguages": [],
	// どの言語に対してindent-rainbowを無効化するか（空の場合はnoneを意味します）。
	"indentRainbow.excludedLanguages": ["plaintext"],
	// エディターが更新されるまでの遅延時間（ms）です。
	// 10にすると超高速になりますが、より多くのリソースを消費する可能性があります。
	"indentRainbow.updateDelay": 100,
	//////////////////////////////////////////////////////////
	// cSpell
	//////////////////////////////////////////////////////////
	"cSpell.language": "en",
	// 指定した言語のファイルのみスペルのチェックを行う。
	// これを指定しないと、関係のない（自分で触っていない）
	// ファイルのスペルチェックまでしてしまう。
	"cSpell.enabledLanguageIds": [
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"yml",
		"sql"
	],
	"cSpell.ignorePaths": [
		"**/package-lock.json",
		"**/node_modules/**",
		"**/vscode-extension/**",
		"**/.git/objects/**",
		".vscode",
		".vscode-insiders",
		//自動生成されるファイル名を指定
		"database.types.ts"
	],
	// 日本語の誤検知を回避
	// "cSpell.ignoreRegExpList": ["[０-９Ａ-Ｚａ-ｚぁ-んァ-ヶ亜-熙纊-黑]+"],
	"cSpell.userWords": [
		"apikey",
		"autodocs",
		"biomejs",
		"buntest",
		"Chayan",
		"clinerules",
		"clsx",
		"codegen",
		"daisyui",
		"darkmode",
		"dbname",
		"enduml",
		"fkey",
		"genspark",
		"githubcopilot",
		"Happys",
		"heroicons",
		"Hono",
		"HTMX",
		"languagedetector",
		"lefthook",
		"llms",
		"Lngs",
		"lucide",
		"masakinihirota",
		"modelcontextprotocol",
		"Navlinks",
		"nextjs",
		"nextui",
		"nums",
		"offcanvas",
		"Packt",
		"paralleldrive",
		"pglight",
		"Pixiv",
		"pkey",
		"plpgsql",
		"pooler",
		"projectbrief",
		"Qiita",
		"rafce",
		"reauthentication",
		"RORO",
		"safetest",
		"shadcn",
		"sidenav",
		"signin",
		"signout",
		"Signup",
		"snaplet",
		"sqlerrm",
		"sslmode",
		"startuml",
		"Supabase",
		"tailwindcss",
		"todos",
		"Turbopack",
		"uithub",
		"unauth",
		"upserted",
		"Usertype",
		"VARCHAR",
		"Vercel",
		"vitepress",
		"whsec",
		"wrtn",
		"Zenn",
		"zustand"
	],
	//////////////////////////////////////////////////////////
	// PlantUML
	//////////////////////////////////////////////////////////
	// "plantuml.exportFormat": "png",
	// "plantuml.server": "http://192.168.1.100:8080",
	// "plantuml.render": "PlantUMLServer",
	//////////////////////////////////////////////////////////
	// 細かいもの
	//////////////////////////////////////////////////////////
	// Emmet のプレビューを表示する
	// ※trueにするとサジェストでタブキーの決定ができなくなる。
	// returnキーだけでしか決定できなくなる。
	"editor.suggest.preview": false,
	// 言語を日本語にする
	"emmet.excludeLanguages": ["markdown"],
	"emmet.variables": {
		"lang": "ja"
	},
	// 全ての空白を表示する
	"editor.renderWhitespace": "none",
	// Live Server を起動したときに情報メッセージを表示しない
	"liveServer.settings.donotShowInfoMsg": true,
	// JavaScript を書いたときに自動的に import する
	"javascript.suggest.autoImports": true,
	// ファイルを移動したときに自動的に import を更新する
	"javascript.updateImportsOnFileMove.enabled": "always",
	// 信頼されていないファイルのセキュリティレベルを "Open" にする
	"security.workspace.trust.untrustedFiles": "open",
	// TypeScript ファイルを移動したときに自動的に import を更新する
	"typescript.updateImportsOnFileMove.enabled": "always",
	// JSON で表示する項目の最大数
	"json.maxItemsComputed": 500,
	// ターミナルで複数行を貼り付けたときに警告を表示しない
	// "terminal.integrated.enableMultiLinePasteWarning": false,
	// Git を同期するときに確認メッセージを表示しない
	"git.confirmSync": false,
	// sticky scroll を有効にする
	"editor.stickyScroll.enabled": true,
	// inline fold を表示する正規表現
	// "inlineFold.regex": "(class|className|href)=(({(`|))|(['\"`]))(.*?)(\\2|(\\4)})",
	// Enable stylelint
	"alt-editor.binary": "C:\\tool\\■秀丸\\hidemaru.exe",
	"alt-editor.args": "/j{line},{column} {filename}",
	//////////////////////////////////////////////////////////
	// 校正君
	//////////////////////////////////////////////////////////
	"japanese-proofreading.textlint.全角文字と半角文字の間": false,
	"japanese-proofreading.textlint.丸かっこ（）": false,
	"japanese-proofreading.textlint.外来語カタカナ表記": false,
	"japanese-proofreading.textlint.全角文字どうし": false,
	"japanese-proofreading.textlint.かっこ類と隣接する文字の間のスペースの有無": false,
	"japanese-proofreading.textlint.ピリオドとカンマの使用（半角）": false,
	"japanese-proofreading.textlint.ハイフン(-)": false,
	"japanese-proofreading.textlint.ダッシュ(-)": false,
	//////////////////////////////////////////////////////////
	// 以下、自動追記
	// ここから下は自動設定での書き込み
	// 自動設定時にコメントも消されるのでここに注記
	//////////////////////////////////////////////////////////
	"diffEditor.ignoreTrimWhitespace": false,
	"window.menuBarVisibility": "compact",
	"git.enableSmartCommit": true,
	"git.openRepositoryInParentFolders": "never",
	"workbench.commandPalette.experimental.suggestCommands": true,
	"diffEditor.renderSideBySide": true,
	"github.copilot.editor.enableAutoCompletions": true,
	"explorer.confirmPasteNative": false,
	"editor.defaultFormatter": "biomejs.biome",
	"github.copilot.chat.scopeSelection": true,
	"github.copilot.chat.localeOverride": "ja",
	"github.copilot.chat.startDebugging.enabled": true,
	"github.copilot.chat.setupTests.enabled": true,
	"terminal.integrated.enableMultiLinePasteWarning": false,
	"chat.editing.alwaysSaveWithGeneratedChanges": true,
	"terminal.integrated.env.windows": {},
	"console-ninja.featureSet": "Community",
	"github.copilot.chat.editor.temporalContext.enabled": true,
	"geminicodeassist.project": "",
	"github.copilot.chat.followUps": "always",
	"chat.agent.maxRequests": 20,
	"chat.promptFiles": true,
	"editor.minimap.enabled": false,
	"diffEditor.maxComputationTime": 0,
}
