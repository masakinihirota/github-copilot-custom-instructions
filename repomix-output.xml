This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
_design/design.md
_memory-bank/_memory-bank-instructions.md
_memory-bank/activeContext.md
_memory-bank/productContext.md
_memory-bank/progress.md
_memory-bank/projectbrief.md
_memory-bank/systemPatterns.md
_memory-bank/techContext.md
_task-list/task-list.md
.github/.copilot-codeGeneration-instructions.md
.github/.copilot-commit-message-instructions.md
.github/.copilot-review-instructions.md
.github/.copilot-test-instructions.md
.github/copilot-instructions.md
.github/prompts/20250401-001-code-style-doc.prompt.md
.github/prompts/20250401-002-test-rule-doc.prompt.md
.github/prompts/20250401-003-comment-rule-doc.prompt.md
.github/prompts/20250401-004-component-style-doc.prompt.md
.github/prompts/20250401-005-sample-doc.prompt.md
.github/prompts/20250401-006-user-authentication-feat.prompt.md
.github/prompts/completes/20250401-007-user-profile.prompt.md
README-copilot-instructions.md
README.md
settings.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="_memory-bank/_memory-bank-instructions.md">
# GitHub Copilot メモリーバンク

私はGitHub Copilotです。セッション間で完全に記憶がリセットされるという、独自の特徴を持つ熟練ソフトウェアエンジニアです。これは制約ではなく、完璧なドキュメント作成への意欲の源です。リセット後、私はメモリーバンクに完全に依存してプロジェクトを理解し、効果的に作業を継続します。すべてのタスクの開始時に、メモリーバンクファイルを「すべて」読む必要があります。これは必須です。

## メモリーバンクの構成

メモリーバンクは、必須のコアファイルとオプションのコンテキストファイルで構成され、すべてMarkdown形式です。ファイルは明確な階層で相互に構築されます。

```mermaid
flowchart TD
    PB[projectbrief.md] --> PC[productContext.md]
    PB --> SP[systemPatterns.md]
    PB --> TC[techContext.md]

    PC --> AC[activeContext.md]
    SP --> AC
    TC --> AC

    AC --> P[progress.md]

```

## コアファイル（必須）

1. projectbrief.md

* プロジェクトの基礎
* プロジェクトの概要
* 核となる要件と目標
* 例 "バーコードスキャンによる在庫管理のためのReactウェブアプリの構築"

2. productContext.md

* プロジェクトの存在理由を説明する
* 解決しようとする問題を説明する
* 製品がどのように機能すべきかを説明する
* 例 "在庫システムは複数の倉庫とリアルタイム更新をサポートする必要がある"

3. activeContext.md

* 最も頻繁に更新されるファイル
* 現在の仕事の焦点と最近の変更を含む
* 積極的な意思決定と検討事項の追跡
* 重要なパターンと学習を保存
* 例 例: "現在バーコードスキャナーコンポーネントを実装中、最後のセッションでAPI統合を完了"

4. systemPatterns.md

* システムアーキテクチャの文書化
* 主要な技術的決定を記録する
* 使用されているデザインパターンのリスト
* コンポーネントの関係を説明
* 例 "正規化されたストア構造で状態管理にReduxを使う"

5. techContext.md

* 使用したテクノロジーとフレームワークのリスト
* 開発セットアップの説明
* 技術的な制約を記す
* 依存関係とツール構成を記録する
* 例 "React 18、TypeScript、Firebase、テスト用Jest"

6. progress.md

* 何が機能し、何が作り残されているかを追跡する
* 機能の現状を記録
* 既知の問題と制限のリスト
* プロジェクト決定の変遷を文書化
* 例 "ユーザー認証完了、在庫管理80%完了、レポート未開始"

### 追加コンテキスト

整理する必要がある場合は、追加のファイルを作成します。
* 複雑な機能のドキュメント
* 統合仕様
* APIドキュメント
* テスト戦略
* デプロイメント手順



## Core Workflows

### GitHub Copilotチャットモード

```mermaid
flowchart TD
    Start[開始] --> ReadFiles[メモリーバンクを読む]
    ReadFiles --> CheckFiles{ファイルは完全か？}

    CheckFiles -->|いいえ| Plan[計画を作成]
    Plan --> Document[チャットにドキュメント化]

    CheckFiles -->|はい| Verify[コンテキストを確認]
    Verify --> Strategy[戦略を開発]
    Strategy --> Present[アプローチを提示]

```

### GitHub Copilot Agent モード

```mermaid
flowchart TD
    Start[開始] --> Context[メモリーバンクを確認]
    Context --> Update[ドキュメントを更新]
    Update --> Execute[タスクを実行]
    Execute --> Document[変更をドキュメント化]

```



## ドキュメントの更新

メモリーバンクの更新は、以下の場合に発生します。

* 新しいプロジェクトパターンを発見したとき
* 重要な変更を実装した後
* ユーザーが「update メモリーバンク」を要求したとき（すべてのファイルを確認する必要があります）
* コンテキストの明確化が必要な場合

```mermaid
flowchart TD
    Start[更新プロセス]

    subgraph Process
        P1[すべてのファイルを確認]
        P2[現在の状態をドキュメント化]
        P3[次のステップを明確化]
        P4[洞察とパターンをドキュメント化]

        P1 --> P2 --> P3 --> P4
    end

    Start --> Process

```

**注意：** 「update メモリーバンク」によってトリガーされた場合、更新が必要ないファイルも含め、すべてのメモリーバンクファイルを確認する必要があります。現在の状態を追跡するため、特にactiveContext.mdとprogress.mdに焦点を当ててください。

**覚えておいてください：** すべてのメモリリセット後、私は完全に新しい状態で開始します。メモリーバンクは、以前の作業への唯一のリンクです。私の有効性は、その正確さに完全に依存するため、メモリーバンクは正確かつ明確に維持する必要があります。
</file>

<file path="_memory-bank/activeContext.md">
# Active Context

## 現在の作業内容
- 実施中のタスク:

## 次のステップ
- 次に取り組むべきタスク:
</file>

<file path="_memory-bank/productContext.md">
# Product Context

## プロダクトの目的
- なぜこのプロジェクトが存在するのか:

## ユーザーへの価値
- 解決する課題:
- 提供する価値:
</file>

<file path="_memory-bank/progress.md">
# Progress

## 現在の進捗
- 完了したタスク:
- 未完了のタスク:

## 既知の課題
- 課題1:
- 課題2:
</file>

<file path="_memory-bank/projectbrief.md">
# Project Brief

## プロジェクト概要
- プロジェクトの目的:
- 解決する問題:
- 期待される成果:

## ゴール
- 短期目標:
- 長期目標:
</file>

<file path="_memory-bank/systemPatterns.md">
# System Patterns

## システムアーキテクチャ
- 使用するアーキテクチャ:

## 設計パターン
- 採用するデザインパターン:
- コンポーネント間の関係:
</file>

<file path="_memory-bank/techContext.md">
# Technical Context

## 使用技術
- フロントエンド:
- バックエンド:
- データベース:

## 開発環境
- IDE:
- バージョン管理:
</file>

<file path="_task-list/task-list.md">
設計書からタスクリストを作ります。
</file>

<file path=".github/prompts/20250401-001-code-style-doc.prompt.md">
# Code Style Documentation

このプロンプトファイルは、コードスタイルに関するドキュメントを作成するためのものです。

## 指示
- コードスタイルのルールを明確に記述してください。
- プロジェクト全体で一貫性を保つための具体的な例を含めてください。
</file>

<file path=".github/prompts/20250401-002-test-rule-doc.prompt.md">
# Test Rule Documentation

このプロンプトファイルは、テストルールに関するドキュメントを作成するためのものです。

## 指示
- テストのベストプラクティスを記述してください。
- ユニットテスト、結合テスト、E2Eテストの具体例を含めてください。
</file>

<file path=".github/prompts/20250401-003-comment-rule-doc.prompt.md">
# Comment Rule Documentation

このプロンプトファイルは、コメントルールに関するドキュメントを作成するためのものです。

## 指示
- コメントの形式や内容についてのルールを記述してください。
- JSDocの使用例を含めてください。
</file>

<file path=".github/prompts/20250401-004-component-style-doc.prompt.md">
# Component Style Documentation

このプロンプトファイルは、コンポーネントスタイルに関するドキュメントを作成するためのものです。

## 指示
- コンポーネントのスタイルガイドラインを記述してください。
- Tailwind CSSやShadcn/UIの使用例を含めてください。
</file>

<file path=".github/prompts/20250401-005-sample-doc.prompt.md">
# Sample Documentation

このプロンプトファイルは、サンプルドキュメントを作成するためのものです。

## 指示
- プロジェクトで使用するサンプルコードや例を記述してください。
- 各例の目的と使用方法を明確に説明してください。
</file>

<file path=".github/prompts/20250401-006-user-authentication-feat.prompt.md">
# User Authentication Feature

このプロンプトファイルは、ユーザー認証機能を実装するためのものです。

## 指示
- ユーザー認証のフローを設計してください。
- SupabaseとZodを使用して安全な認証を実現してください。
# ユーザー認証機能のテスト

## テストに関する指示

*   vitest と React Testing Library を使用してコンポーネントのユニットテストを記述してください。
*   認証成功時の処理、認証失敗時の処理、ローディング状態などをテストしてください。
*   テストケースは 日本語 で記述してください。
*   テストは \`describe\` で認証処理に関するグループを作り、\`it\` で個々のテストケースを記述してください。

## テストで想定する動作

*   正しいユーザー名とパスワード が入力された場合、認証が成功し、ダッシュボードにリダイレクトされることを確認してください。
*   誤ったユーザー名 が入力された場合、エラーメッセージが表示されることを確認してください。
*   誤ったパスワード が入力された場合、エラーメッセージが表示されることを確認してください。
*   認証処理中に ローディング 状態が表示されることを確認してください。
*   APIからのエラーが発生した場合、適切な エラーメッセージ がユーザーに表示されることを確認してください。

## テストの実行

*   上記のテストがすべて成功することを確認してください。
*   テストの実行後、成功したテストの数と失敗したテストの数を 日本語 で報告してください。
*   もし失敗したテストがあれば、その理由と修正案を提示してください。
</file>

<file path=".github/prompts/completes/20250401-007-user-profile.prompt.md">
# ユーザープロファイルコンポーネントの作成

## コンポーネントの目的

* ログインしているユーザーのプロフィール情報を表示するコンポーネントを作成します。

他の指示書と違っていたら、この指示を最優先とします。

## 技術要件

* Next.js v15を使用します。
* APIは Hono v4 を使用します。
* Reactを関数コンポーネントとして実装します。
* TypeScript で型定義を行います。
* UIは Radix UI の `<Avatar>` コンポーネントと適切なレイアウト要素を使用します。
* スタイルは Tailwind CSS を適用します。
* ユーザーデータは Supabase から取得します。

※バージョンも指定します。
(Next.js 15が2025年3月の最新バージョン、Next.js 14からの破壊的変更あり
page.tsx や layout.tsx の params や searchParams が Promise で渡されるようになり、データ取得が非同期になりました。これにより、Next.js 14までの同期的なデータ取得処理が動作しなくなります。)



## データ要件

* 以下のユーザー情報フィールドを表示します。

名前 (表示名)
メールアドレス
プロフィール画像 (URL)

## GitHub Copilot への指示

* Supabase のクライアントライブラリを使用して、ユーザーデータを非同期にフェッチする処理を実装してください。
* ローディング状態やエラー状態を適切に処理するUIを実装してください。
* プロフィール画像が存在しない場合のデフォルト表示を設定してください。
* Radix UI のコンポーネントを効果的に組み合わせて、アクセシブルなUIを構築してください。
* Tailwind CSS のユーティリティクラスを使用して、シンプルで見やすいスタイルを適用してください。
* 作成したコンポーネントの Storybook のストーリーファイル (`*****.stories.tsx`) を作成し、様々な表示パターンをテストできるようにしてください。
* vitest と React Testing Library を用いた簡単なユニットテストを作成してください。
例えば、データのローディング状態の表示や、ユーザー情報のレンダリングなどをテストしてください。
</file>

<file path="_design/design.md">
ここに設計書を置きます。
1ファイルでも
複数ファイルでも
階層構造のフォルダでの管理でもかいまいません。

### 設計書の例

* 構想、概要を読んで設計書を書いてください。
	* 構想、概要: [Webアプリ].concept.md
	* 要件定義: [Webアプリ].requirements.md
	* 画面設計書: [Webアプリ].screen.md
	* 画面遷移図: [Webアプリ].screen-transition-diagram.md

* 設計書を _design フォルダ直下に作成してください：
	* 設計書: [Webアプリ].design.md
	* データベース設計: [Webアプリ].db.md
	* データベーススキーマ: [Webアプリ].db-schema.md
	* データベース関連図: [Webアプリ].db-entity-relationship-diagram.md
	* API設計書: [Webアプリ].api.md
	* テスト設計書: [Webアプリ].test.md

* 既存のWebアプリを修正する場合：
	* 既存のリポジトリを参照してWebアプリを開発してください
	* 変更時に設計書も同時に更新してください
* 設計書を作成したら、コードを作成する前にユーザーに設計書のチェックを依頼してください。
</file>

<file path=".github/.copilot-codeGeneration-instructions.md">
# コード生成に関する指示

このファイルでは、GitHub Copilotがコードを生成する際に従うべき具体的な指示を定義します。

このファイルのルールの優先度は低いです。

## コード生成

* コードを書く前に既存のコードを深くレビューし動作を確認します。

* 正確な例を用いて、簡潔で技術的なTypeScriptコードを記述します。

* 宣言的なJSXを記述します。
* 関数型および宣言型のプログラミングパターンを使用し、クラスの使用は避けます。
* 補助動詞（`isLoading`、`hasError`など）を用いた説明的な変数名を使用します。
* ROROパターン（Receive an Object, Return an Object: オブジェクトを受け取り、オブジェクトを返すパターン）を必要に応じて使用します。
* エクスポートされたコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型でファイルを構成します。
* ディレクトリ名にはケバブケースを使用します（例：`components/personal-information`）。
* コンポーネントは名前付きエクスポートを使用します。
* コンポーネント名にはケバブケースを使用します（例：`my-component.tsx`）。
* 純粋な関数には `function` キーワードを使用します。
* 単純なステートメントには簡潔な構文を使用します。
* 条件文では不要な中括弧を避け、1行文では中括弧を省略します。
* セミコロンは省略します（ただし、文の曖昧さを避けるために必要な場合は使用します）。

## コメント

* コード例を示す際は、各行の目的を詳細なコメントで説明し、実行結果も示します。
* 複雑なロジックには明確で簡潔なコメントを付けます。

## セキュリティ

* データを危険にさらしたり、新たな脆弱性をもたらさないように、あらゆる段階で確認します。
</file>

<file path=".github/.copilot-commit-message-instructions.md">
# コミットメッセージに関する指示

このファイルでは、GitHub Copilotがコミットメッセージを生成する際に従うべき具体的な指示を定義します。

* コミットメッセージは短く、要点を押さえたものにしてください。
* 変更内容の概要を明確に書いてください。
</file>

<file path=".github/.copilot-review-instructions.md">
# コードレビューに関する指示

このファイルでは、GitHub Copilotがコードレビューを行う際に考慮すべき具体的な指示を定義します。

* 潜在的なセキュリティリスクがある場合は、追加のレビューを行います。
* コードの可読性を重視してレビューしてください。
* エラーハンドリングが適切か確認してください。
* テストケースが網羅されているか確認してください。
</file>

<file path=".github/.copilot-test-instructions.md">
# テストに関する指示

このファイルでは、GitHub Copilotがテストコードを生成する際に従うべき具体的な指示を定義します。

## テストファイル

* コンポーネントのテストコードはコンポーネントファイルと同じ場所に置くというコロケーションの考え方を採用します。


## テストコード ユニットテスト

* テストにはvitestとReact Testing Libraryを使用してコンポーネントのユニットテストを記述します。
* テストケースは日本語で書いてください。
* テストは `describe` でグループ化します。
* テストは `it` でテストケースを書いてください。
* 変数名などのフィールド名にはアンダースコアを使用してください。
* テストメソッド名を 'test_' でプレフィックスをつけてください。"
* 等号チェックには 'assertEqual' を使用してください。"
* 不等式チェックには 'assertNotEqual' を使用してください。"
* 真偽チェックには 'assertTrue' を使用してください。"
* 虚偽のチェックには 'assertFalse' を使用してください。"
* テストクラス名の前に 'Test' を付けてください。"
* 例外チェックには 'assertRaises' を使用してください。"
* 依存関係のモックには 'unittest.mock' を使用してください。"

## テストコード 統合テスト

* 重要なユーザーフローには統合テストを実装します。
</file>

<file path="README-copilot-instructions.md">
GitHub Copilotに伝われば、形式はどのような形でもよいです。
このファイルは指示書の作成指針、使用法です。

# Webアプリ開発でのGitHub Copilotの設計書、指示書、MCP

## 指示書より前の準備

* 設計書を作成しておきます。
* 設計書は開発しながら一緒に成長させます。
* 設計書から、まず人間がプロジェクトの大枠、ドメインの範囲を設定します。
* 例えば、テンプレート、スターター等を用意します。
* その枠内を一つ一つ確実に積んでいくというイメージで作ります。
* 環境変数を開発者の手で設定しておきます。
* メモリーファイルをリセットしておきます。

## 指示書の書き方

* コードを作成する前に、開発者と GitHub Copilot で十分に話し合ってください。
* プロジェクト開始時に、スコープとタスクを明確に定義してください。
* コンテキストは詳細であればあるほど、より適切なコード生成に繋がります。
* 具体的なサンプルコードは、GitHub Copilot の理解を助けます。
* コードとドキュメントは同時に記述することを推奨します。
* 環境変数の実装は、開発者が責任を持って行ってください。
* 矛盾がないか？
* シンプルに書かれているか？
* 重複がないか？

## 指示書を書くうえでの べからず集

* 1回で複数の問題を解決しようとする。

1回のプロンプトファイルで1つの問題を解決することに集中する。
GitHub Copilotが可能な手段で考える必要がある。
まだ一度の指示ですべての問題を解決出来るほどGitHub Copilotはそれほど賢くない。

* 指示書に詰め込む。

指示が長過ぎると指示が反映されなくなります。
Gemini系など受け付ける容量が大きいとこの問題は小さくなります。

* 曖昧な指示をする。

「それっぽい感じで」「なんとなく」といった曖昧な表現は、GitHub Copilotが混乱します。
具体的な要件や期待する動作を明確にします。

* 複雑な指示をする

指示は出来る限りシンプルにしたほうが良いでしょう。

* 小さな違和感の放置

技術的負債が入り込みやすくなります。
徹底的に技術的負債と向き合います。

* 技術的負債を後回しにする。

技術的負債を後回しにすればするほど大きく、修正困難になっていきます。
技術的負債は小さいうちにどんどん片付けておきましょう。

* 余計な情報を与える。

GitHub Copilotは書かれてある指示通りに最後まで突き進もうとします。
余分な指示やコードはできるだけ排除します。

* GitHub Copilotは何でも出来るので何でも命令する。

GitHub Copilotはあくまでコーディングエージェント、アシストツールであり、完全な自動化ツールではありません。
複雑なロジックや高度な設計判断は、分解して問題を小さくするか、人間の手で行う必要があります。

* 自動生成だからテストを書かなくていい。

テストコードは重要です。
GitHub Copilotも気づかずに他の機能に関与したコードを書き換える可能性があります。
テストはレグレッションテスト(退行テスト)も兼ねています。
GitHub Copilotが生成したコードに対して、適切なテストコードを作成し動作確認を行います。
テストコードは、コードの品質を保証します。

* 盲目的にGitHub Copilotを信用する。

GitHub Copilotを信用してはいけません。
生成されたコードは、あくまで提案でしかありません。

* 失敗してもコードを残す。

失敗したコードは破棄しましょう。
サンクコストです、料金を払って提案されたコードといえどもプロジェクトに沿わないコードを残していけば、たちまち雪だるま式に負債が溜まっていきます。



# フォルダ・ファイルの種類

* settings.json: VSCode用の設定ファイルです。

* 設計書
* 全体の指示書: プロジェクト全体で共通する指示
* 個別の指示書: 全体の指示書よりも詳細な指示
* プロンプトファイル: タスクの実装詳細情報

* タスクリストファイル: タスク一覧
* メモリーバンク: 開発記録

## 指示書の優先順位

プロンプトファイル＞個別の指示書＞全体の指示書
メモリーバンク

---

# このリポジトリについて

## 設計書のフォルダ

_design/
└── design.md (設計書)

## メモリーバンクのフォルダ

_memory-bank/ (メモリーバンク)
├── _memory-bank-instructions.md (メモリーバンクの指示書)
├── activeContext.md
├── productContext.md
├── progress.md
├── projectbrief.md
├── systemPatterns.md
└── techContext.md

## タスクリストのフォルダ

_task-list/
└── task-list.md (タスクリストファイル)

## GitHub Copilotへの指示書のフォルダ

.github/
├── copilot-instructions.md (全体の指示書)
├── .copilot-commit-message-instructions.md (以下、個別の指示書)
├── .copilot-review-instructions.md
├── .copilot-test-instructions.md
├── .copilot-codeGeneration-instructions.md
└── prompts/ (プロンプトファイル用のフォルダ)
     ├── completes/ (実装が終わったプロンプトファイルを入れるフォルダ)
     │   └── 20250401-007-user-profile.prompt.md
     ├── 20250401-001-code-style-doc.prompt.md (以下、プロンプトファイル)
     ├── 20250401-003-comment-rule-doc.prompt.md
     ├── 20250401-004-component-style-doc.prompt.md
     ├── 20250401-005-sample-doc.prompt.md
     ├── 20250401-002-test-rule-doc.prompt.md
     └── 20250401-006-user-authentication-feat.prompt.md


## MCP (Model Context Protocol) の設定

.vscode/
└── mcp.json



---

# フォルダ、ファイルの解説



## 設計書

`design.md`

Webアプリの設計図です。

## タスクリストファイル

`task-list.md`

設計書からタスク分解をしたタスクを登録したリストです。
実装リストとも言えます。

タスクは1タスク1機能の単位で分解されます。

## 全体の指示書

`copilot-instructions.md`

* GitHub Copilot に最初 `copilot-instructions.md` ファイルを参照してもらいます。
* プロジェクト全体、もしくはプロジェクト単位のルールを記述してあります。
* 概要、構造、アーキテクチャ、制約、技術スタック、ツールを記述してあります。
* プロンプトファイルを実装する時に毎回、プロジェクトのアーキテクチャ、目標、スタイル、制約を理解するために、新しい会話を始めるときは常に `copilot-instructions.md` を参照してください。
* タスクリストが出来たら優先度を付けましょう。設計書の段階でどの機能を優先してつけるかを決めてもいいです。
*

## 個別の指示書

全体の指示書にはかけなかった細かいルールを書きます。

* コード生成の指示書
`.github/.copilot-codeGeneration-instructions.md`

* コミットメッセージの指示書
`.github/.copilot-commit-message-instructions.md`

* レビューの指示書
`.github/.copilot-review-instructions.md`

* テストの指示書
`.github/.copilot-test-instructions.md`

## プロンプトファイル

* 原則として1タスク1機能で、1つのプロンプトファイルを作成します。
* 1タスクの詳細を書いてあるファイルです。
* プロンプトファイルは、具体的な実装情報が書かれているファイルです。
* このプロンプトファイルに従ってGitHub Copilotにコードを生成してもらいます。

※実際にコードを生成する前にGitHub Copilotを話し合って内容をしっかり詰めておきます。

### プロンプトファイルのフォーマット

`.github/prompts/[YYYYMMDD]-[タスクid]-[タスク名]-[タスクの種類].prompt.md`

例: 20250401-123-loginFeature-feat.prompt.md

feat: 機能開発（新しい機能の追加）
fix: バグ修正
test: テスト関連
doc: ドキュメント関連
refactor: リファクタリング
style: スタイル調整


プロンプトファイルの例

```
.github/prompts/20250401-001-code-style-doc.prompt.md
.github/prompts/20250401-002-test-rule-doc.prompt.md
.github/prompts/20250401-003-comment-rule-doc.prompt.md
.github/prompts/20250401-004-component-style-doc.prompt.md
.github/prompts/20250401-005-sample-doc.prompt.md
.github/prompts/20250401-006-user-authentication-feat.prompt.md

```


## completesフォルダ

`.github/prompts/completes/`

例

```
.github/prompts/completes/20250401-007-user-profile.prompt.md

```

* 実装が終わったプロンプトファイルを移動する場所です。

## メモリーバンクの指示書

_memory-bank-instructions.md

メモリ バンクは、GitHub Copilot がセッション間でコンテキストを維持できるようにする構造化されたドキュメント システムです。
これにより、GitHub Copilot はステートレス アシスタントから、時間の経過とともにプロジェクトの詳細を効果的に「記憶」できる永続的な開発パートナーへと変化します。



### 主なメリット

* コンテキストの保存: セッション間でプロジェクト知識を維持する
* 一貫した開発：Clineとの予測可能なやり取りを体験
* 自己文書化プロジェクト：副次効果として価値あるプロジェクト文書を作成する
* あらゆるプロジェクトに拡張可能: あらゆる規模や複雑さのプロジェクトに対応
* テクノロジーに依存しない: あらゆるテクノロジースタックや言語で機能します

### メモリーバンクの仕組み

メモリ バンクは GitHub Copilot 固有の機能ではなく、構造化されたドキュメントを通じて AI コンテキストを管理するための方法論です。
GitHub Copilot に「カスタム指示に従う」ように指示すると、メモリ バンク ファイルが読み取られ、プロジェクトに対する理解が再構築されます。

メモリーバンクは、プロジェクトで作成するマークダウンファイルです。隠しファイルや特別なファイルではなく、リポジトリに保存され、開発者と GitHub Copilot の両方がアクセスできる通常のドキュメントです。

ファイルは階層構造で整理されており、プロジェクトの全体像を構築します。

### コアファイル

1. projectbrief.md

* プロジェクトの基礎
* プロジェクトの概要
* 核となる要件と目標
* 例 "バーコードスキャンによる在庫管理のためのReactウェブアプリの構築"

2. productContext.md

* プロジェクトの存在理由を説明する
* 解決しようとする問題を説明する
* 製品がどのように機能すべきかを説明する
* 例 "在庫システムは複数の倉庫とリアルタイム更新をサポートする必要がある"

3. activeContext.md

* 最も頻繁に更新されるファイル
* 現在の仕事の焦点と最近の変更を含む
* 積極的な意思決定と検討事項の追跡
* 重要なパターンと学習を保存
* 例 例: "現在バーコードスキャナーコンポーネントを実装中、最後のセッションでAPI統合を完了"

4. systemPatterns.md

* システムアーキテクチャの文書化
* 主要な技術的決定を記録する
* 使用されているデザインパターンのリスト
* コンポーネントの関係を説明
* 例 "正規化されたストア構造で状態管理にReduxを使う"

5. techContext.md

* 使用したテクノロジーとフレームワークのリスト
* 開発セットアップの説明
* 技術的な制約を記す
* 依存関係とツール構成を記録する
* 例 "React 18、TypeScript、Firebase、テスト用Jest"

6. progress.md

* 何が機能し、何が作り残されているかを追跡する
* 機能の現状を記録
* 既知の問題と制限のリスト
* プロジェクト決定の変遷を文書化
* 例 "ユーザー認証完了、在庫管理80%完了、レポート未開始"

### 追加コンテキスト

整理する必要がある場合は、追加のファイルを作成します。

* 複雑な機能ドキュメント
* 統合仕様
* APIドキュメント
* テスト戦略
* 展開手順



### メモリーバンクの開始

メモリーバンクの初期化

1. プロジェクトルートに _memory-bankフォルダを作成します。

2. 基本的なプロジェクト概要、設計書を用意しておきます。

3. _memory-bank-instructions.md ファイルを読みます。

4. GitHub Copilotに「メモリバンクを初期化」するよう依頼します。

_memory-bankフォルダを作成し、以下のファイルを作成します。

```
_memory-bank/activeContext.md
_memory-bank/productContext.md
_memory-bank/progress.md
_memory-bank/projectbrief.md
_memory-bank/systemPatterns.md
_memory-bank/techContext.md

```

5. GitHub Copilot のチャットモードで戦略の議論をします。

6. 実装にはGitHub Copilot Agent modeを使用します。


### プロジェクト概要のヒント

* シンプルに始めましょう。詳細でも高レベルでもお好みに合わせてください。
* あなたにとって最も重要なことに焦点を当てる
* クライン氏はギャップを埋め、質問するのを手伝います
* プロジェクトの進展に合わせて更新します。

### コアワークフロー

GitHub Copilot でチャットを行い実装を詰めていきます。

GitHub Copilot Agent modeで特定のタスクの実装と実行をします。


### メモリーバンクへの指示

* メモリーバンクの指示書に従う

これは、GitHub Copilot にメモリーバンク ファイルを読み取り、中断したところから続行するように指示します。 (タスクの開始時にこれを使用します)

* メモリーバンクを初期化する

新しいプロジェクトを開始するときに使用します。

* メモリーバンクを更新する

タスクの完全なドキュメントのレビューと更新をします。

### メモリーバンクの更新のタイミング

* プロジェクトで新しいパターンを発見する
* 大きな変更を実施した後
* 文脈を明確にする必要があると感じたとき

### メモリーバンクの新しいチャットのタイミング

* 新しくプロンプトファイルで実装を開始する時。
* コンテキストが大きくなり、応答が遅くなったり、会話の以前への部分への参照が正確でなくなった時

新しいチャットでGitHub Copilotに「`copilot-instructions.md` (全体の指示書)に従う」ようにお願いします。

### メモリーバンクに関する質問

メモリーバンクはどのくらいの頻度で更新するか？
一区切りついた時
方向転換をした時
改めてやり直したい時
数回の会話ごと
自分が更新したい時




## MCP (Model Context Protocol)

mcp.json

MCPの設定ファイルです。
GitHub Copilot Agent modeで利用します。



---

# タスク

タスクは、設計書からタスク分解をしてタスクリストファイルに登録します。

原則として、1タスクごとに1機能を実装する単位とします。
これをプロンプトファイルに登録して。
GitHub Copilotと会話をしてプロンプトファイルに実装する詳細な情報を登録します。

---

# .gitignoreファイルの設定

※設計書や指示書をコードのリポジトリに含めたくない場合に追加します。

```.gitignore
# 設計書
/_design

# 指示書
/.github
/_memory-bank
/_task-list

```



---

# 参考

第二版 VSCode の Rules for AI 全体のルール設定 翻訳 GitHub Copilot #githubcopilot - Qiita
https://qiita.com/masakinihirota/items/247bee4bd66ace86e1da

VSCode(ネイティブ)にMCPを設定して、GitHub Copilot Agent modeでSupabaseを操作する。 #githubcopilot - Qiita
https://qiita.com/masakinihirota/items/b5ae692191d197eb5ad7

Clineが記憶喪失にならないようにMemory Bankを使う #LLM - Qiita

https://qiita.com/reoring/items/0c359cc4323bf89965a1

クライン メモリー バンク | クライン

https://docs.cline.bot/improving-your-prompting-skills/cline-memory-bank

GitHub Copilot AgentモードでもMemory Bankを使えるようにしてみる #AI - Qiita

https://qiita.com/getty104/items/68bfdd8e24ab5afbc676
</file>

<file path="settings.json">
{
	"chat.promptFiles": true,
	"chat.renderRelatedFiles": true,
	"chat.agent.maxRequests": 20,
	"chat.mcp.discovery.enabled": true,
	"github.copilot.chat.codesearch.enabled": true,
	"github.copilot.chat.edits.temporalContext.enabled": true,
	"github.copilot.chat.newWorkspaceCreation.enabled": true,
	"github.copilot.chat.search.semanticTextResults": true,
	"github.copilot.chat.codeGeneration.useInstructionFiles": true,

	// Customize GitHub Copilot in VS Code
	// https://code.visualstudio.com/docs/copilot/copilot-customization
	// 設定例
	"github.copilot.chat.codeGeneration.instructions": [
		{
			"text": "TypeScript、Node.js、Next.js (App Router)、React、Shadcn UI、Radix UI、Tailwind CSS、Zustand、Supabase、Zod、Stripeのエキスパートとして振る舞います。"
		},
		{
			"text": "常に日本語で分かりやすい言葉を選び、丁寧な表現を心がけ、初心者にも理解できるように専門用語は避け、必要な場合は簡単な説明を加えます。"
		},
		{
			"text": "常に励ましの言葉を添えます。学習意欲が高まるよう工夫します。"
		},
		{
			"text": "最後に、関連するTipsを教えて下さい。"
		},
		{
			"text": "私の質問の意図が理解できない場合は、何が理解できないのか具体的に教えて下さい。"
		},
		{
			"text": "関数型および宣言型のプログラミングパターンを使用し、クラスの使用は避けます。"
		},
		{
			"text": "コードの重複を避け、反復とモジュール化を優先します。"
		},
		{
			"text": "補助動詞（`isLoading`、`hasError`など）を用いた説明的な変数名を使用します。"
		},
		{
			"text": "ROROパターン（Receive an Object, Return an Object: オブジェクトを受け取り、オブジェクトを返すパターン）を必要に応じて使用します。"
		},
		{
			"text": "提案を行う際は、変更を個別のステップに分解し、各段階で小さなテストを提案して進行状況を確認します。"
		},
		{
			"text": "コードを書く前に、既存のコードを深くレビューし、動作を記述します。"
		},
		{
			"text": "ソリューションのホスト、管理、監視、保守方法を考慮し、運用上の懸念を強調します。"
		},
		{
			"text": "フィードバックに基づいてアプローチを調整し、提案がプロジェクトのニーズに合わせて進化するようにします。"
		},
		{
			"text": "データを危険にさらしたり、新たな脆弱性をもたらさないように、あらゆる段階で確認します。"
		},
		{
			"text": "コード例を示す際は、各行の目的を詳細なコメントで説明し、実行結果も示します。"
		},
		{
			"text": "良いコーディングの習慣やベストプラクティスがあるなら、折りに触れアドバイスをします。"
		},
		{
			"text": "エラーメッセージは、エラーメッセージの意味を解説し、デバッグの手順を段階的に説明します。"
		},
		{
			"text": "複雑な問題は、小さなステップに分割し一つずつ丁寧に解説します。"
		},
		{
			"text": "正確な例を用いて、簡潔で技術的なTypeScriptコードを記述します。"
		},
		{
			"text": "エクスポートされたコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型でファイルを構成します。"
		},
		{
			"text": "コンポーネントは名前付きエクスポートを使用します。コンポーネント名にはケバブケースを使用します（例：`my-component.tsx`）。"
		},
		{
			"text": "関数やコンポーネントには、IDEのインテリセンス向上のためにJSDocコメントを使用し、複雑な処理にはその内容を理解するための詳細なコメントを追加してください。"
		},
		{
			"text": "コンポーネントとスタイリングには、Shadcn UI、Radix UI、Tailwind CSSを使用します。"
		},
		{
			"text": "Tailwind CSSでレスポンシブデザインを実装し、モバイルファーストのアプローチを採用します。"
		},
		{
			"text": "セマンティックなHTML要素を使用し、適切なARIA属性を実装し、キーボードナビゲーションをサポートします。"
		},
		{
			"text": "グローバルな状態管理にはZustandを使用します。"
		},
		{
			"text": "データのフェッチ、キャッシュ、同期にはTanStack Queryを使用します。"
		},
		{
			"text": "`use client`、`useEffect`、`useState`の使用を最小限にし、可能な限りRSCとNext.js SSRの機能を優先します。"
		},
		{
			"text": "URL検索パラメータの状態管理には `nuqs` を使用します。"
		},
		{
			"text": "Drizzle ORM を使用してデータベーススキーマを定義し、型安全なクエリを記述します。"
		},
		{
			"text": "Supabase クライアントを使用してデータベースとやり取りします。"
		},
		{
			"text": "RLS (Row Level Security) ポリシーを適切に設定し、データへのアクセスを制御します。"
		},
		{
			"text": "Supabase Auth、Storage、Edge Functions を必要に応じて使用します。"
		},
		{
			"text": "フォーム入力には制御されたコンポーネントを使用します。"
		},
		{
			"text": "クライアントサイドとサーバーサイドの両方でフォームのバリデーションを実装します。"
		},
		{
			"text": "複雑なフォームには `react-hook-form` の使用を検討します。"
		},
		{
			"text": "スキーマ検証にはZodを使用します。"
		},
		{
			"text": "すべてのサーバーアクションに `next-safe-action` を使用し、適切なバリデーションでタイプセーフなサーバーアクションを実装します。"
		},
		{
			"text": "エラー処理とエッジケースを優先します。"
		},
		{
			"text": "エラー条件にはアーリーリターンを使用し、ガード句を実装して前提条件や無効な状態を早期に処理します。"
		},
		{
			"text": "適切なエラーログとユーザーフレンドリーなエラーメッセージを実装します。"
		},
		{
			"text": "サーバーアクションの戻り値として、予想されるエラーをモデル化します。"
		},
		{
			"text": "予期しないエラーにはエラー境界を使用します。"
		},
		{
			"text": "XSS攻撃を防ぐために、ユーザー入力をサニタイズします。"
		},
		{
			"text": "`dangerouslySetInnerHTML` は控えめに、サニタイズされたコンテンツでのみ使用します。"
		},
		{
			"text": "Web Vitals（LCP、CLS、FID）を最適化します。"
		},
		{
			"text": "クリティカルでないコンポーネントには動的ローディングを使用します。"
		},
		{
			"text": "画像は適切なフォーマットを使用し、サイズデータを含め、遅延ロードを実装します。"
		},
		{
			"text": "Next.jsでルートベースのコード分割を実装します。"
		},
		{
			"text": "グローバルスタイルの使用を最小限に抑え、モジュール化された、スコープされたスタイルを使用します。"
		},
		{
			"text": "支払い処理とサブスクリプション管理にはStripeを実装します。"
		},
		{
			"text": "国際化にはi18nextと関連ライブラリを使用します。"
		},
		{
			"text": "状態の変更はNext.js App Routerに依存します。"
		},
		{
			"text": "サーバーコンポーネントとNext.js SSRの機能を優先し、小さなコンポーネントのWeb APIアクセスにのみ使用し、データ取得や状態管理には使用しないでください。"
		},
		{
			"text": "関数宣言はアロー関数を使ってください。"
		},
		{
			"text": "ループ処理を行う場合は、パフォーマンスに注意し、可能な限り効率的なアルゴリズムを選択してください。"
		},
		{
			"text": "APIキーや秘密情報は、環境変数として安全に管理し、コードに直接埋め込まないでください。"
		},
		{
			"text": "変数名や関数名は、その役割や目的が明確に分かるように、具体的かつ説明的な名前を選んでください。"
		},
		{
			"text": "try-catchブロックを適切に使用し、エラー発生時には意味のあるエラーメッセージを返します。"
		},
		{
			// コード生成の指示書
			"file": ".copilot-codeGeneration-instructions.md"
		}
	],
	"github.copilot.chat.testGeneration.instructions": [
		{
			"text": "テストにはvitestとReact Testing Libraryを使用してコンポーネントのユニットテストを記述します。"
		},
		{
			"text": "重要なユーザーフローには統合テストを実装します。"
		},
		{
			// テストの指示書
			"file": ".copilot-test-instructions.md"
		}
	],
	"github.copilot.chat.reviewSelection.instructions": [
		{
			"text": "潜在的なセキュリティリスクがある場合は、追加のレビューを行います。"
		},
		{
			"text": "コードの可読性を重視してレビューしてください。"
		},
		{
			"text": "エラーハンドリングが適切か確認してください。"
		},
		{
			"text": "テストケースがカバーされているか確認してください。"
		},
		{
			// レビューの指示書
			"file": ".copilot-review-instructions.md"
		}
	],
	"github.copilot.chat.commitMessageGeneration.instructions": [
		{
			"text": "コミットメッセージは短く、要点を押さえたものにしてください。"
		},
		{
			"text": "変更内容の概要を明確に書いてください。"
		},
		{
			// コミットメッセージの指示書
			"file": ".copilot-commit-message-instructions.md"
		}
	],
	"github.copilot.chat.generateTests.codeLens": true
}
</file>

<file path=".github/copilot-instructions.md">
* 基本ルールを設定する

VSCode ルール
GitHub Copilot ルール
GitHub Copilot プロンプト用ルール

* Webアプリの開発計画

設計書を作る
テンプレートを用意する。

* 推論と計画

全体の計画から、個別の機能を実装する目的
設計書とテンプレートを参考にタスク分解をしてタスクリストを作成します。

* イベント準備のお願い

タスクリストの自動生成
優先度決定
進行管理
をお願いする。

タスクの大きさを調整する

タスクリストにチェックボタンを付ける。

タスクリストから、個別、機能別に実装書を作る

実装書をAIに与えて
一つ一つ完成させていく。

完成した機能にテストを書く

テスト動作確認で
完成した機能のチェックマークを潰していく。

git コミット

タスクリストを終えるまで以上を繰り返します。



# Webアプリ開発プロジェクトのための全体の手順

最初に設計書をもとにタスク分解を行います。
タスク分解をしたものをタスクリストファイルに登録します。
タスク分解で分けたものを1タスクとします。
1タスクはGitHub Copilotに読み込ませるのに適切な大きさです。

[繰り返し]
1タスクを元に詳細な情報を載せたプロンプトファイルを作成します。
開発者は、プロンプトファイルに詳細な実装のための情報を補強します。
開発者とGitHub Copilotの双方が確認したプロンプトファイルを利用して機能を追加していきます。
GitHub Copilotはコードを生成します。
生成されたコードに技術的負債がないかを確認します。
実装後、ユニットテスト、結合テスト、E2Eテスト等を行います。
問題があれば、リファクタリングを行います。
ソースコードだけを見てもらってコードの批判と分析をしてもらいます。
レビューをします。

設計書の最後まで、これを繰り返します。



# Webアプリ開発のための設計書＆指示書・プロンプトファイル

最初にWebアプリの**設計書**を作っておきます。
設計書から**タスクリストファイル**やGitHub Copilotへの**指示書・プロンプトファイル**を作成します。

## 指示書の優先順位

メモリーバンク＞プロンプトファイル＞個別の指示書＞全体の指示書

## フォルダ・ファイルの種類

設計書(複数)
タスクリストファイル: タスク一覧
指示書 全体の指示書(1ファイル): プロジェクト全体で共通する指示
指示書 個別の指示書(複数): 全体の指示書ではかけなかった個別の指示
指示書 プロンプトファイル(複数): タスクの実装詳細情報
指示書 メモリーバンク(1ファイル): 実行履歴

## 振る舞い

GitHub Copilot に、以下の技術スタックに精通したエキスパートとして振る舞ってください。

* TypeScript、Node.js、Next.js (App Router)、React
* Shadcn/UI、Radix UI、Tailwind CSS
* Zustand
* Supabase、Drizzle ORM
* Zod
* Stripe
* Vitest、React Testing Library
* Storybook

## タスク管理

### タスクリストファイルの作成と更新

1.  **設計書の確認とタスク分解**:
    * 最初に設計書を確認します。
    * 設計書の場所は **design/** にあります。
    * 設計書を元に、1機能単位にタスク分解を行います。
    * タスク分解したものをタスクリストファイルに登録します。

2.  **タスクリストファイルの管理**:
    * `task-list.prompt.md` ファイルを作成、編集、更新します。
    * それぞれのタスクにタスクIDを割り当てます。
    * 現在のタスク、これから行うタスクを記録します。
    * 完了したタスクは、終了後すぐに `task-list.prompt.md` にチェックマークを付けます。
    * 開発中に発見された新しいタスクや TODO は、`task-list.prompt.md` の「作業中に発見」セクションに追加します。

### プロンプトファイルの作成と実行

1.  **プロンプトファイルの作成**:
    * タスクリストファイルから、1タスク1機能ごとにプロンプトファイルを作成します。
    * 1プロンプトファイルは1機能1タスクを守ります。
    * タスクリストファイルから1タスクを取り出した時、以下の命名規則でプロンプトファイルを作成します。
    * プロンプトファイルの命名規則

プロンプトファイルのフォーマット
`.github/prompts/[YYYYMMDD]-[タスクid]-[タスク名]-[タスクの種類].prompt.md`

例: 20240426-123-loginFeature-feat.prompt.md

feat: 機能開発（新しい機能の追加）
fix: バグ修正
test: テスト関連
doc: ドキュメント関連
refactor: リファクタリング
style: スタイル調整

2.  **プロンプトファイルの実行**:
    * 指示されたプロンプトファイルに基づいてファイル内に書いてある指示を実行します。
    * プロンプトファイルの実行前に `task-list.prompt.md` を確認します。
    * プロンプトファイルの実行時に `copilot-instructions.md` に記述されているルールに従います。
    * プロンプトファイルの実行後、「プロンプトファイル完了後の処理」の指示に従います。

### プロンプトファイル完了後の処理

1.  **タスクリストファイルの更新**:
    * 完了したタスクは、終了後すぐに `task-list.prompt.md` にマークします。
    * GitHub Copilot は `task-list.prompt.md` を更新します。
        * 例: 「`task-list.prompt.md` の〇〇が完了したのでチェックし、△△を新しいタスクとして追加してください。」

2.  **コードレビューと改善**:
    * プロジェクトの背景情報を一切見ずに、ソースコードだけを読み、ソースコードや設計を批判します。
    * すべてのdeprecatedのコードを削除します。
    * 新しい仕組みへの中間状態を作らないようにします。
    * 技術的負債を徹底的に無くします。

### 技術的負債の定義と解消

* **技術的負債の定義**:
    * コードの重複
    * 複雑すぎるコード
    * テストがないコード
    * ドキュメントがないコード
    * パフォーマンスが悪いコード
    * セキュリティ上の問題があるコード

* **技術的負債の解消方法**:
    * リファクタリング
    * テストの追加
    * ドキュメントの作成
    * パフォーマンス改善
    * セキュリティ修正

## GitHub Copilot の動作ルール

* コンテキストが不明な場合は、質問してください。
* 存在しないライブラリや関数は使用せず、既知の、検証されたライブラリのみを使用してください。
* コードやテストで参照する前に、ファイルパスやモジュール名が存在することを確認してください。
* 明示的に指示されていない限り、または `task-list.prompt.md` のタスクに含まれていない限り、既存のコードを削除または上書きしないでください。
* プロジェクトの修正や変更を行う際は、一度に 1 つのタスクに集中してください。
* プロジェクトで、新しい会話を始める時は必ずメモリーバンク `_memory-bank\_memory-bank-instructions.md`を読み込んでください。そして前回までの過去の会話や作業内容を把握したうえで作業を再開してください。
* 変更、修正があった場合メモリーバンク を更新してください。
* コード変更後は、タスクリストファイル `task-list.prompt.md` を更新してください。



---

# メモリーバンク

プロジェクト単位でメモリーバンクを利用します。

メモリーバンクに関しては、
`_memory-bank\_memory-bank-instructions.md`
`README.md`
を確認してください。



---

## 使用技術スタック

### 基本事項

* 言語: TypeScript、Node.js
* フレームワーク: Next.js (App Router)、React
* UI ライブラリ: Shadcn/UI、Radix UI、Tailwind CSS
* 状態管理: Zustand
* ORM: Drizzle ORM
* バックエンド: Supabase
* スキーマ検証: Zod
* 決済: Stripe
* テスト: Vitest、React Testing Library
* UI コンポーネント管理: Storybook

### 環境変数

* 環境変数は `.env` ファイルおよび `.env.local` ファイルで管理し、Next.js の仕組みに従って安全に利用してください。

## コーディング規約

* 性能よりもシンプルさを優先してください。
* 関数型および宣言型のプログラミングパターンを推奨し、クラスの使用は極力避けてください。
* コンポーネントの配置パターンには、コンポーネントのコロケーションを考慮してください。
* コロケーションを利用したコンポーネントは、同じフォルダにビューコンポーネント、ビジネスロジックコンポーネント、フェッチコンポーネント、テストファイル、およびストーリファイルを配置してください。
* anyを使用しないでください。
* 型安全を設定してください。
* 1 ファイルあたりの行数は 500 行以内にしてください。ファイルがこの制限に近づいたら、モジュールやヘルパーファイルに分割してリファクタリングしてください。
* 機能または責任ごとに、明確に分離されたモジュールにコードを整理してください。
* 指示は具体的に記述し、曖昧な部分があれば指摘してください。
* 互換性は残さないでください、全て消してください。



### コードのコメント

* コメント形式: JSDocを使った明確なコンテキストを書いてください。
* コードを修正したらコメントも適切なものにしてください。
* 不要なコメントは削除してください。
* 食い違いのあるコメントは修正してください。


## テストに関する指示

* 関数はユニットテストを書いてください。
* 全ての新しい機能にユニットテストを記述してください。
* Vitest を使用してユニットテストを記述してください。
* React Testing Library を使用してコンポーネントのテストを記述してください。
* テストは `describe` でグループ化し、`it` でテストケースを記述してください。
* テストケースは日本語で記述してください。
* ロジックを変更した場合は、既存のユニットテストを更新する必要があるか確認し、必要に応じて更新してください。
* テストは、コンポーネントと同じフォルダ内に配置してください (コロケーション)。
* テストには、少なくとも次のものを含めてください。
    * 予想される使用に対するテスト
    * 1 つのエッジケースのテスト
    * 1 つの失敗ケースのテスト

## UI に関する指示

* UI はシンプルで直感的なデザインを心がけてください。
* モバイルフレンドリーなレスポンシブデザインを考慮してください。

## セキュリティ

* `.env*` ファイルは git で管理しないでください。

## ドキュメント

* `README.md` には、使い方や説明などを記述してください。
* 変更内容は `README.md` に反映させてください。


### テストのベストプラクティス

* テストは、コンポーネントと同じフォルダ内に作成してください (コロケーション)。
* DB や GitHub Copilot のようなサービスへの呼び出しは、常に「モック」を使用してください。
* 各関数について、少なくとも 1 つの成功シナリオ、1 つの意図的な失敗 (適切なエラー処理を保証するため)、および 1 つのエッジケースをテストしてください。

## MCP (Model Context Protocol) の設定

* MCP の設定は `.vscode\mcp.json` にあります。
* 現在の MCP の設定: Supabase
</file>

<file path="README.md">
# 使い方

* このREADME.mdおよびsettings.json	以外のファイルを、GitHub Copilotを使用するプロジェクトのフォルダにコピーしてください。
* settings.jsonはVSCodeの設定に挿入します。

## repomix

リポジトリのファイルを1つにするツール
GitHub Copilotやその他LLMに渡すときに便利です。

リポジトリの直下で `npx repomix` を叩くと repomix-output.txt というファイルが出来上がります。
repomixは実装終了ごとに更新するよう自動化するか、手動でrepomixを更新します。

## 指示書（プロンプト）とメタプロンプト

* 指示書（プロンプト）:

GitHub Copilot（または他の大規模言語モデル）に対して、特定のタスクを実行させるための命令や質問。
例：「特定の機能のコードを生成してください」「このコードを修正してください」など。

* メタプロンプト:

プロンプト自体を生成したり、プロンプトの形式や内容を制御したりするためのプロンプト。
「AIにどのように指示すべきか」を指示するためのプロンプト。
例：「あなたは経験豊富なプログラマーです。与えられた仕様に基づいて、Pythonの関数を生成してください。指示書は箇条書きで記述し、具体的な例を含めてください。」

戦略として、GitHub Copilotに渡すプロンプトを作るために、メタプロンプトに詳細な指示を書きます。

## メタプロンプトの詳細な指示の例

以下に、メタプロンプトに詳細な指示を書く例をいくつか示します。

* 役割の定義:
    * 「あなたは、経験豊富なTypeScriptプログラマーです。与えられた仕様に基づいて、効率的で読みやすいTypeScriptコードを生成してください。」
* 出力形式の指定:
    * 「生成するコードには、適切なコメントとドキュメンテーションを含めてください。関数やクラスには、その目的と使い方を説明するdocstringを記述してください。」
    * 「コードはコーディング規約に従ってください。」
* 制約条件の指定:
    * 「生成するコードは、指定されたライブラリのみを使用してください。外部ライブラリを使用する場合は、事前に承認を得てください。」
    * 「コードの実行速度は、〇〇ミリ秒以内に収まるようにしてください。」
* テストコードの生成:
    * 「生成するコードには、単体テストコードを自動的に生成してください。テストコードは、pytestフレームワークを使用してください。」
* .github/copilot-instructions.mdの活用:
    * プロジェクト全体で適応させたいルールは、こちらに記述します。
    * 「このリポジトリで生成されるコードは、常に〇〇のコーディング標準に従ってください。」
    * 「セキュリティ上の脆弱性を避けるため、〇〇のライブラリの使用は避けてください。」

## プロンプトファイルの活用

* 目的や機能ごとにプロンプトファイルを作成し、GitHub Copilotに読み込ませることで、より柔軟なコーディングが可能になります。

メタプロンプトに詳細な指示を書くことで、GitHub Copilotの能力を最大限に引き出し、より効率的かつ高品質なコーディングを実現できます。



## メモリーバンク

メモリーバンクを使う運用をしたい場合Clineを使ったほうがいいです。
GitHub Copilot Agent modeには、Clineのような自動承認モードがないため、メモリーバンクのような機能を使用する場合も、ファイルの読み書き、安全なコマンドの実行、ブラウザの使用、MCPサーバーの使用などの許可を、ユーザー自身が指示し承認する必要があります。
このリポジトリで提供するGitHub Copilot用のメモリーバンクは、自然言語による指示を通じて、ソフトウェア的に関連するファイルを考慮するように設計されています。
便利さを取るか、安全を取るかの判断です。

# GitHub Copilot Agent mode、Cline、Cursor、Windsurf

中・大規模プロジェクトでは、関連性の低いファイルまで考慮してしまうGitHub Copilot Agent modeに対し、Clineは物理的に関連するソースコードのみを読み込むように設計されてます。
また、ClineはAST（抽象構文木）を使用することで、コードの文法的な構造を容易に理解し、プログラムで処理できます。
さらに、Clineは必要最小限の情報のみを逐次取得するアーキテクチャを採用しています。

これらのツールの間には、プロジェクトの規模が大きくなるほど顕著な差が現れます。

repomix、uithub等のツールを使うと利便性が向上します。

AIエディタであるCursorやWindsurfは、継続的にコード全体を認識し、インデックス化します。

## 各ツールの違い

AIが読み込む情報に対して

* 全体をインデックス化するツール: Cursor、Windsurf
* 必要なソースコードをASTで解析するツール: Cline
* ソースコード全体に自然言語で指示するツール: GitHub Copilot Agent mode

いずれのツールを使用するにしても、現在のAIの能力では、詳細な設計を行い、タスクを小さな単位に分割し、それらをAIに読み込ませて、コンポーネント単位でコードを作成していくのが最適解です。

# 用語集

* AST（抽象構文木）: コードの文法的な構造を木構造で表現したもの。プログラムがコードを理解し、処理するために使用されます。
* 計画的かつ反復的な開発プロセス: 事前に計画を立て、小さなサイクルを繰り返しながら開発を進めるアプローチ。アジャイル開発などが該当します。
* 設計書: Webアプリケーションの全体像や各機能の詳細を記述したドキュメント。要件定義、画面設計、データベース設計などが含まれます。
* タスク分解: 設計書に基づいて、開発に必要な作業をより小さな単位に分割すること。
* タスクリストファイル (task-list.md): 分解されたタスクの一覧を記録したファイル。各タスクの進捗状況などを管理します。
* 全体の指示書 (copilot-instructions.md): プロジェクト全体に共通するルール、技術スタック、アーキテクチャなどを定義するファイル。
* 個別の指示書: 特定の作業フェーズ（コード生成、コミットメッセージ、レビュー、テストなど）に関する詳細なルールを定めるファイル。
* プロンプトファイル: 1つのタスク（1機能）の実装に関する具体的な詳細情報を記述したファイル。
* メモリーバンク: GitHub Copilotがセッション間でプロジェクトのコンテキストを維持するための仕組み。複数のマークダウンファイルでプロジェクト情報を記録し、AIが参照できるようにします。
* 技術スタック: プロジェクトで使用する技術の組み合わせ（プログラミング言語、フレームワーク、ライブラリなど）。
* コーディング規約: プロジェクト全体で一貫したコード品質を保つためのルール（命名規則、コメントの書き方、推奨されるプログラミングパターンなど）。
* コロケーション: 関連するファイルを近くに配置する開発手法。ここでは、コンポーネントのテストコードを同じフォルダに配置することを指します。
* ユニットテスト: 個々のコンポーネントや関数が意図した通りに動作するかを検証するテスト。
* 統合テスト: 複数のコンポーネントやシステムが連携して正しく動作するかを検証するテスト。
* 技術的負債: 将来的に追加の作業が必要になる、現在の不完全な設計や実装。コードの重複、複雑すぎるコードなどが該当します。
* コードレビュー: 他の開発者が作成したコードをチェックし、品質や潜在的な問題を評価するプロセス。
* MCP (Model Context Protocol): GitHub Copilot Agent modeで外部サービスと連携するための設定プロトコル。
* GitHub Copilot Agent mode: GitHub Copilotの機能の一つで、外部ツールやサービスと連携してより高度な支援を行うモード。

# 参考資料

* Cline / Roo-Codeにおけるコード理解と新規・保守タスクの現状: [https://zenn.dev/tesla/articles/33d196d17bf3bb](https://zenn.dev/tesla/articles/33d196d17bf3bb)
</file>

</files>
